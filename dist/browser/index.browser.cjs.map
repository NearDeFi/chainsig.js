{"version":3,"sources":["../../src/constants.ts","../../src/utils/index.ts","../../src/utils/cryptography.ts","../../src/chain-adapters/index.ts","../../src/chain-adapters/ChainAdapter.ts","../../src/chain-adapters/EVM/index.ts","../../src/chain-adapters/EVM/utils.ts","../../src/chain-adapters/EVM/EVM.ts","../../src/chain-adapters/Bitcoin/index.ts","../../src/chain-adapters/Bitcoin/Bitcoin.ts","../../src/chain-adapters/Bitcoin/utils.ts","../../src/chain-adapters/Bitcoin/BTCRpcAdapter/Mempool/Mempool.ts","../../src/chain-adapters/Bitcoin/BTCRpcAdapter/BTCRpcAdapter.ts","../../src/chain-adapters/Bitcoin/BTCRpcAdapter/index.ts","../../src/chain-adapters/Cosmos/index.ts","../../src/chain-adapters/Cosmos/utils.ts","../../src/chain-adapters/Cosmos/Cosmos.ts","../../src/chain-adapters/Solana/index.ts","../../src/chain-adapters/Solana/Solana.ts","../../src/contracts/index.ts","../../src/contracts/ChainSignatureContract.ts","../../src/contracts/near/index.ts","../../src/contracts/near/signAndSend/index.ts","../../src/contracts/near/signAndSend/keypair.ts","../../src/contracts/near/constants.ts","../../src/contracts/near/account.ts","../../src/utils/publicKey.ts","../../src/contracts/near/transaction.ts","../../src/contracts/near/ChainSignatureContract.ts","../../src/contracts/evm/index.ts","../../src/contracts/evm/ChainSignaturesContractABI.ts","../../src/contracts/evm/errors.ts","../../src/contracts/evm/utils.ts","../../src/contracts/evm/ChainSignaturesContract.ts"],"names":["constants_exports","__export","CHAINS","CONTRACT_ADDRESSES","ENVS","KDF_CHAIN_IDS","ROOT_PUBLIC_KEYS","utils_exports","cryptography_exports","compressPubKey","deriveChildPublicKey","najToUncompressedPubKeySEC1","toRSV","signature","uncompressedPubKeySEC1","slicedPubKey","x","y","najPublicKey","decodedKey","base58","rootUncompressedPubKeySEC1","predecessorId","path","chainId","ec","EC","derivationPath","scalarHex","keccak256","sha3_256","oldPublicKeyPoint","scalarTimesG","newPublicKeyPoint","newX","newY","chain_adapters_exports","ChainAdapter","Bitcoin_exports","Cosmos_exports","EVM_exports","Solana_exports","EVM","fetchEVMFeeProperties","client","transaction","gas","feeData","maxFeePerGas","maxPriorityFeePerGas","publicClient","contract","fees","nonce","from","rest","r","s","yParity","concatHex","numberToHex","predecessor","uncompressedPubKey","publicKeyNoPrefix","hash","getAddress","address","serializeTransaction","serialized","parseTransaction","transactionRequest","serializedTx","txHash","toBytes","message","hashMessage","typedDataRequest","hashTypedData","userOp","entryPointAddress","chainIdArgs","entryPoint","encoded","encodeAbiParameters","hexToBigInt","concat","pad","isAddress","userOpHash","rsvSignatures","rsvSignature","txSerialized","error","BTCRpcAdapter","BTCRpcAdapters","Bitcoin","parseBTCNetwork","network","X","_Bitcoin","btcRpcAdapter","satoshis","btc","transactionId","data","tx","S","vout","scriptPubKey","rawSignature","inputs","outputs","psbt","input","prevOut","out","derivedKey","publicKeyBuffer","payment","transactionJSON","psbtHex","hashesToSign","mockKeyPair","index","publicKey","keyPair","mpcSignature","Mempool","providerUrl","confirmationTarget","targets","utxos","feeRate","ret","coinselect","transactionHex","response","txid","Cosmos","fetchChainInfo","chainInfo","chains","chain","prefix","expectedChainId","denom","rpcUrl","restUrl","gasPrice","asset","assets","decimals","unit","endpoints","Registry","fromHex","amount","b","pubKeySha256","sha256","ripemd160Hash","ripemd160","bech32","TxRaw","toBase64","fromBase64","publicKeyBytes","gasLimit","fee","calculateFee","GasPrice","accountOnChain","StargateClient","accountNumber","sequence","txBodyEncodeObject","txBodyBytes","pubkey","encodePubkey","encodeSecp256k1Pubkey","authInfoBytes","makeAuthInfoBytes","SignMode","signDoc","makeSignDoc","signBytes","makeSignBytes","payload","sig","txBytes","broadcastResponse","Solana","toBigInt","value","args","PublicKey","balance","base58Key","buffer","Transaction","request","SystemProgram","blockhash","messageBytes","senderAddress","signatureBuffer","contracts_exports","ChainSignatureContract","evm_exports","near_exports","BaseChainSignatureContract","utils","signAndSend_exports","keypair_exports","BTCTransaction","CosmosTransaction","EVMTransaction","NEAR_MAX_GAS","BN","DONT_CARE_ACCOUNT_ID","getNearAccount","networkId","accountId","keypair","KeyPair","keyStore","InMemoryKeyStore","connection","Connection","Account","getRootPublicKey","contractAddress","environment","_","transaction_exports","mpcPayloadsToChainSigTransaction","responseToMpcSignature","sendTransactionUntil","contractId","currentContractFee","getTransactionLastResult","receiverId","actions","options","near","connect","signer","accessKey","recentBlockHash","nearUtils","transactions","nearTransactionSignature","signedTransaction","withRetry","txOutcome","rootPublicKey","sendTransactionOptions","account","Contract","najPubKey","deposit","result","actionCreators","req","evm","createPublicClient","http","signatures","cosmos","ChainSignaturesContractABI_exports","abi","errors_exports","ChainSignatureError","SignatureContractError","SignatureNotFoundError","SigningError","requestId","receipt","errorCode","originalError","getRequestId","version","count","errorData","fromBlock","errorLogs","logs","signatureData"],"mappings":"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","file":"index.browser.cjs","sourcesContent":["import { type NajPublicKey } from '@types'\n\nexport const ENVS = {\n  TESTNET_DEV: 'TESTNET_DEV',\n  TESTNET: 'TESTNET',\n  MAINNET: 'MAINNET',\n} as const\n\nexport const CHAINS = {\n  ETHEREUM: 'ETHEREUM',\n  NEAR: 'NEAR',\n} as const\n\n/**\n * Root public keys for the Sig Network Smart Contracts across different environments.\n *\n * These keys should never change.\n */\nexport const ROOT_PUBLIC_KEYS: Record<keyof typeof ENVS, NajPublicKey> = {\n  [ENVS.TESTNET_DEV]:\n    'secp256k1:54hU5wcCmVUPFWLDALXMh1fFToZsVXrx9BbTbHzSfQq1Kd1rJZi52iPa4QQxo6s5TgjWqgpY8HamYuUDzG6fAaUq',\n  [ENVS.TESTNET]:\n    'secp256k1:3Ww8iFjqTHufye5aRGUvrQqETegR4gVUcW8FX5xzscaN9ENhpkffojsxJwi6N1RbbHMTxYa9UyKeqK3fsMuwxjR5',\n  [ENVS.MAINNET]:\n    'secp256k1:4tY4qMzusmgX5wYdG35663Y3Qar3CTbpApotwk9ZKLoF79XA4DjG8XoByaKdNHKQX9Lz5hd7iJqsWdTKyA7dKa6Z',\n}\n\n/**\n * Chain IDs used in the key derivation function (KDF) for deriving child public keys to\n * distinguish between different chains.\n *\n * @see {@link deriveChildPublicKey} in cryptography.ts for usage details\n */\nexport const KDF_CHAIN_IDS = {\n  [CHAINS.ETHEREUM]: '0x1',\n  [CHAINS.NEAR]: '0x18d',\n} as const\n\n/**\n * Contract addresses for different chains and environments.\n *\n * - Testnet Dev: Used for internal development, very unstable\n * - Testnet: Used for external development, stable\n * - Mainnet: Production contract address\n *\n * @see ChainSignatureContract documentation for implementation details\n */\nexport const CONTRACT_ADDRESSES: Record<\n  keyof typeof CHAINS,\n  Record<keyof typeof ENVS, string>\n> = {\n  [CHAINS.NEAR]: {\n    [ENVS.TESTNET_DEV]: 'dev.sig-net.testnet',\n    [ENVS.TESTNET]: 'v1.sig-net.testnet',\n    [ENVS.MAINNET]: 'v1.sig-net.near',\n  },\n  [CHAINS.ETHEREUM]: {\n    [ENVS.TESTNET_DEV]: '0x69C6b28Fdc74618817fa380De29a653060e14009',\n    [ENVS.TESTNET]: '0x83458E8Bf8206131Fe5c05127007FA164c0948A2',\n    [ENVS.MAINNET]: '0xf8bdC0612361a1E49a8E01423d4C0cFc5dF4791A',\n  },\n}\n","export * as cryptography from './cryptography'\n","import { base58 } from '@scure/base'\nimport { ec as EC } from 'elliptic'\nimport { sha3_256 } from 'js-sha3'\nimport { keccak256 } from 'viem'\n\nimport { KDF_CHAIN_IDS } from '@constants'\nimport {\n  type NajPublicKey,\n  type MPCSignature,\n  type RSVSignature,\n  type UncompressedPubKeySEC1,\n} from '@types'\n\nexport const toRSV = (signature: MPCSignature): RSVSignature => {\n  // Handle NearNearMpcSignature\n  if (\n    'big_r' in signature &&\n    typeof signature.big_r === 'object' &&\n    'affine_point' in signature.big_r &&\n    's' in signature &&\n    typeof signature.s === 'object' &&\n    'scalar' in signature.s\n  ) {\n    return {\n      r: signature.big_r.affine_point.substring(2),\n      s: signature.s.scalar,\n      v: signature.recovery_id + 27,\n    }\n  }\n  // Handle ChainSigNearMpcSignature\n  else if (\n    'big_r' in signature &&\n    typeof signature.big_r === 'string' &&\n    's' in signature &&\n    typeof signature.s === 'string'\n  ) {\n    return {\n      r: signature.big_r.substring(2),\n      s: signature.s,\n      v: signature.recovery_id + 27,\n    }\n  }\n  // Handle ChainSigEvmMpcSignature\n  else if (\n    'bigR' in signature &&\n    'x' in signature.bigR &&\n    's' in signature &&\n    typeof signature.s === 'bigint'\n  ) {\n    return {\n      r: signature.bigR.x.toString(16).padStart(64, '0'),\n      s: signature.s.toString(16).padStart(64, '0'),\n      v: signature.recoveryId + 27,\n    }\n  }\n\n  throw new Error('Invalid signature format')\n}\n\n/**\n * Compresses an uncompressed public key to its compressed format following SEC1 standards.\n * In SEC1, a compressed public key consists of a prefix (02 or 03) followed by the x-coordinate.\n * The prefix indicates whether the y-coordinate is even (02) or odd (03).\n *\n * @param uncompressedPubKeySEC1 - The uncompressed public key in hex format, with or without '04' prefix\n * @returns The compressed public key in hex format\n * @throws Error if the uncompressed public key length is invalid\n */\nexport const compressPubKey = (\n  uncompressedPubKeySEC1: UncompressedPubKeySEC1\n): string => {\n  const slicedPubKey = uncompressedPubKeySEC1.slice(2)\n\n  if (slicedPubKey.length !== 128) {\n    throw new Error('Invalid uncompressed public key length')\n  }\n\n  const x = slicedPubKey.slice(0, 64)\n  const y = slicedPubKey.slice(64)\n\n  const isEven = parseInt(y.slice(-1), 16) % 2 === 0\n  const prefix = isEven ? '02' : '03'\n\n  return prefix + x\n}\n\n/**\n * Converts a NAJ public key to an uncompressed SEC1 public key.\n *\n * @param najPublicKey - The NAJ public key to convert (e.g. secp256k1:3Ww8iFjqTHufye5aRGUvrQqETegR4gVUcW8FX5xzscaN9ENhpkffojsxJwi6N1RbbHMTxYa9UyKeqK3fsMuwxjR5)\n * @returns The uncompressed SEC1 public key (e.g. 04 || x || y)\n */\nexport const najToUncompressedPubKeySEC1 = (\n  najPublicKey: NajPublicKey\n): UncompressedPubKeySEC1 => {\n  const decodedKey = base58.decode(najPublicKey.split(':')[1])\n  return `04${Buffer.from(decodedKey).toString('hex')}`\n}\n\n/**\n * Derives a child public key from a parent public key using the sig.network v1.0.0 epsilon derivation scheme.\n * The parent public keys are defined in @constants.ts\n *\n * @param najPublicKey - The parent public key in uncompressed SEC1 format (e.g. 04 || x || y)\n * @param predecessorId - The predecessor ID is the address of the account calling the signer contract (e.g EOA or Contract Address)\n * @param path - Optional derivation path suffix (defaults to empty string)\n * @returns The derived child public key in uncompressed SEC1 format (04 || x || y)\n */\nexport function deriveChildPublicKey(\n  rootUncompressedPubKeySEC1: UncompressedPubKeySEC1,\n  predecessorId: string,\n  path: string = '',\n  chainId: string\n): UncompressedPubKeySEC1 {\n  const ec = new EC('secp256k1')\n\n  const EPSILON_DERIVATION_PREFIX = 'sig.network v1.0.0 epsilon derivation'\n  const derivationPath = `${EPSILON_DERIVATION_PREFIX},${chainId},${predecessorId},${path}`\n\n  let scalarHex = ''\n\n  if (chainId === KDF_CHAIN_IDS.ETHEREUM) {\n    scalarHex = keccak256(Buffer.from(derivationPath)).slice(2)\n  } else if (chainId === KDF_CHAIN_IDS.NEAR) {\n    scalarHex = sha3_256(derivationPath)\n  } else {\n    throw new Error('Invalid chain ID')\n  }\n\n  const x = rootUncompressedPubKeySEC1.substring(2, 66)\n  const y = rootUncompressedPubKeySEC1.substring(66)\n\n  const oldPublicKeyPoint = ec.curve.point(x, y)\n  const scalarTimesG = ec.g.mul(scalarHex)\n  const newPublicKeyPoint = oldPublicKeyPoint.add(scalarTimesG)\n\n  const newX = newPublicKeyPoint.getX().toString('hex').padStart(64, '0')\n  const newY = newPublicKeyPoint.getY().toString('hex').padStart(64, '0')\n\n  return `04${newX}${newY}`\n}\n","export { ChainAdapter } from './ChainAdapter'\n\nexport * as evm from './EVM'\nexport * as btc from './Bitcoin'\nexport * as cosmos from './Cosmos'\nexport * as solana from './Solana'\n","import { type Transaction } from '@solana/web3.js'\nimport { type Hash } from 'viem'\n\nimport type { HashToSign, RSVSignature, Signature } from '@types'\n\nexport abstract class ChainAdapter<TransactionRequest, UnsignedTransaction> {\n  /**\n   * Gets the native token balance and decimals for a given address\n   *\n   * @param address - The address to check\n   * @returns Promise resolving to an object containing:\n   *          - balance: The balance as a bigint, in the chain's base units\n   *          - decimals: The number of decimals used to format the balance\n   */\n  abstract getBalance(address: string): Promise<{\n    balance: bigint\n    decimals: number\n  }>\n\n  /**\n   * Uses Sig Network Key Derivation Function to derive the address and public key. from a signer ID and string path.\n   *\n   * @param predecessor - The id/address of the account requesting signature\n   * @param path - The string path used to derive the key\n   * @returns Promise resolving to the derived address and public key\n   */\n  abstract deriveAddressAndPublicKey(\n    predecessor: string,\n    path: string\n  ): Promise<{\n    address: string\n    publicKey: string\n  }>\n\n  /**\n   * Serializes an unsigned transaction to a string format.\n   * This is useful for storing or transmitting the transaction.\n   *\n   * @param transaction - The unsigned transaction to serialize\n   * @returns The serialized transaction string\n   */\n  abstract serializeTransaction(transaction: UnsignedTransaction): string\n\n  /**\n   * Deserializes a transaction string back into an unsigned transaction object.\n   * This reverses the serialization done by serializeTransaction().\n   *\n   * @param serialized - The serialized transaction string\n   * @returns The deserialized unsigned transaction\n   */\n  abstract deserializeTransaction(serialized: string): UnsignedTransaction\n\n  /**\n   * Prepares a transaction for Sig Network MPC signing by creating the necessary payloads.\n   * This method handles chain-specific transaction preparation including:\n   * - Fee calculation\n   * - Nonce/sequence management\n   * - UTXO selection (for UTXO-based chains)\n   * - Transaction encoding\n   *\n   * @param transactionRequest - The transaction request containing parameters like recipient, amount, etc.\n   * @returns Promise resolving to an object containing:\n   *          - transaction: The unsigned transaction\n   *          - hashesToSign: Array of payloads to be signed by MPC. The order of these payloads must match\n   *                         the order of signatures provided to finalizeTransactionSigning()\n   */\n  abstract prepareTransactionForSigning(\n    transactionRequest: TransactionRequest\n  ): Promise<{\n    transaction: UnsignedTransaction\n    hashesToSign: HashToSign[]\n  }>\n\n  /**\n   * Adds Sig Network MPC-generated signatures to an unsigned transaction.\n   *\n   * @param params - Parameters for adding signatures\n   * @param params.transaction - The unsigned transaction to add signatures to\n   * @param params.rsvSignatures - Array of RSV signatures generated through MPC. Must be in the same order\n   *                              as the payloads returned by prepareTransactionForSigning()\n   * @returns The serialized signed transaction ready for broadcast\n   */\n  abstract finalizeTransactionSigning(params: {\n    transaction: UnsignedTransaction | Transaction\n    rsvSignatures: RSVSignature[] | Signature\n  }): string\n\n  /**\n   * Broadcasts a signed transaction to the network.\n   *\n   * @param txSerialized - The serialized signed transaction\n   * @returns Promise resolving to an object containing the transaction hash/ID\n   */\n  abstract broadcastTx(txSerialized: string): Promise<{ hash: string }>\n}\n","// EVM\nexport { EVM } from './EVM'\n\nexport { fetchEVMFeeProperties } from './utils'\n\nexport type {\n  EVMTransactionRequest,\n  EVMUnsignedTransaction,\n  EVMMessage,\n  EVMTypedData,\n} from './types'\n","import { type PublicClient, type TransactionRequest } from 'viem'\n\nexport interface EVMFeeProperties {\n  gas: bigint\n  maxFeePerGas: bigint\n  maxPriorityFeePerGas: bigint\n}\n\nexport async function fetchEVMFeeProperties(\n  client: PublicClient,\n  transaction: TransactionRequest\n): Promise<EVMFeeProperties> {\n  const [gas, feeData] = await Promise.all([\n    client.estimateGas(transaction),\n    client.estimateFeesPerGas(),\n  ])\n\n  const maxFeePerGas = feeData.maxFeePerGas ?? BigInt(10_000_000_000) // 10 gwei\n  const maxPriorityFeePerGas =\n    feeData.maxPriorityFeePerGas ?? BigInt(10_000_000_000) // 10 gwei\n\n  return {\n    gas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n  }\n}\n","import {\n  parseTransaction,\n  type PublicClient,\n  hashMessage,\n  hashTypedData,\n  keccak256,\n  toBytes,\n  type Hex,\n  serializeTransaction,\n  type Signature,\n  numberToHex,\n  getAddress,\n  type Address,\n  type Hash,\n  concatHex,\n  encodeAbiParameters,\n  hexToBigInt,\n  concat,\n  pad,\n  isAddress,\n} from 'viem'\n\nimport { ChainAdapter } from '@chain-adapters/ChainAdapter'\nimport type {\n  EVMTransactionRequest,\n  EVMUnsignedTransaction,\n  EVMMessage,\n  EVMTypedData,\n  UserOperationV6,\n  UserOperationV7,\n} from '@chain-adapters/EVM/types'\nimport { fetchEVMFeeProperties } from '@chain-adapters/EVM/utils'\nimport type { BaseChainSignatureContract } from '@contracts/ChainSignatureContract'\nimport type { HashToSign, RSVSignature } from '@types'\n\n/**\n * Implementation of the ChainAdapter interface for EVM-compatible networks.\n * Handles interactions with Ethereum Virtual Machine based blockchains like Ethereum, BSC, Polygon, etc.\n */\nexport class EVM extends ChainAdapter<\n  EVMTransactionRequest,\n  EVMUnsignedTransaction\n> {\n  private readonly client: PublicClient\n  private readonly contract: BaseChainSignatureContract\n\n  /**\n   * Creates a new EVM chain instance\n   * @param params - Configuration parameters\n   * @param params.publicClient - A Viem PublicClient instance for reading from the blockchain\n   * @param params.contract - Instance of the chain signature contract for MPC operations\n   */\n  constructor({\n    publicClient,\n    contract,\n  }: {\n    publicClient: PublicClient\n    contract: BaseChainSignatureContract\n  }) {\n    super()\n\n    this.contract = contract\n    this.client = publicClient\n  }\n\n  private async attachGasAndNonce(\n    transaction: EVMTransactionRequest\n  ): Promise<EVMUnsignedTransaction> {\n    const fees = await fetchEVMFeeProperties(this.client, transaction)\n    const nonce = await this.client.getTransactionCount({\n      address: transaction.from,\n    })\n\n    const { from, ...rest } = transaction\n\n    return {\n      ...fees,\n      nonce,\n      chainId: Number(await this.client.getChainId()),\n      type: 'eip1559',\n      ...rest,\n    }\n  }\n\n  private transformRSVSignature(signature: RSVSignature): Signature {\n    return {\n      r: `0x${signature.r}`,\n      s: `0x${signature.s}`,\n      yParity: signature.v - 27,\n    }\n  }\n\n  private assembleSignature(signature: RSVSignature): Hex {\n    const { r, s, yParity } = this.transformRSVSignature(signature)\n\n    if (yParity === undefined) {\n      throw new Error('Missing yParity')\n    }\n\n    return concatHex([r, s, numberToHex(yParity + 27, { size: 1 })])\n  }\n\n  async deriveAddressAndPublicKey(\n    predecessor: string,\n    path: string\n  ): Promise<{\n    address: string\n    publicKey: string\n  }> {\n    const uncompressedPubKey = await this.contract.getDerivedPublicKey({\n      path,\n      predecessor,\n    })\n\n    if (!uncompressedPubKey) {\n      throw new Error('Failed to get derived public key')\n    }\n\n    const publicKeyNoPrefix = uncompressedPubKey.startsWith('04')\n      ? uncompressedPubKey.slice(2)\n      : uncompressedPubKey\n\n    const hash = keccak256(Buffer.from(publicKeyNoPrefix, 'hex'))\n    const address = getAddress(`0x${hash.slice(-40)}`)\n\n    return {\n      address,\n      publicKey: uncompressedPubKey,\n    }\n  }\n\n  async getBalance(\n    address: string\n  ): Promise<{ balance: bigint; decimals: number }> {\n    const balance = await this.client.getBalance({\n      address: address as Address,\n    })\n    return {\n      balance,\n      decimals: 18,\n    }\n  }\n\n  serializeTransaction(transaction: EVMUnsignedTransaction): `0x${string}` {\n    return serializeTransaction(transaction)\n  }\n\n  deserializeTransaction(serialized: `0x${string}`): EVMUnsignedTransaction {\n    return parseTransaction(serialized) as EVMUnsignedTransaction\n  }\n\n  async prepareTransactionForSigning(\n    transactionRequest: EVMTransactionRequest\n  ): Promise<{\n    transaction: EVMUnsignedTransaction\n    hashesToSign: HashToSign[]\n  }> {\n    const transaction = await this.attachGasAndNonce(transactionRequest)\n\n    const serializedTx = serializeTransaction(transaction)\n    const txHash = toBytes(keccak256(serializedTx))\n\n    return {\n      transaction,\n      hashesToSign: [Array.from(txHash)],\n    }\n  }\n\n  async prepareMessageForSigning(message: EVMMessage): Promise<{\n    hashToSign: HashToSign\n  }> {\n    return {\n      hashToSign: Array.from(toBytes(hashMessage(message))),\n    }\n  }\n\n  async prepareTypedDataForSigning(typedDataRequest: EVMTypedData): Promise<{\n    hashToSign: HashToSign\n  }> {\n    return {\n      hashToSign: Array.from(toBytes(hashTypedData(typedDataRequest))),\n    }\n  }\n\n  /**\n   * This implementation is a common step for Biconomy and Alchemy.\n   * Key differences between implementations:\n   * - Signature format: Biconomy omits 0x00 prefix when concatenating, Alchemy includes it\n   * - Version support: Biconomy only supports v6, Alchemy supports both v6 and v7\n   * - Validation: Biconomy uses modules for signature validation, Alchemy uses built-in validation\n   */\n  async prepareUserOpForSigning(\n    userOp: UserOperationV7 | UserOperationV6,\n    entryPointAddress?: Address,\n    chainIdArgs?: number\n  ): Promise<{\n    userOp: UserOperationV7 | UserOperationV6\n    hashToSign: HashToSign\n  }> {\n    const chainId = chainIdArgs ?? (await this.client.getChainId())\n    const entryPoint =\n      entryPointAddress || '0x0000000071727De22E5E9d8BAf0edAc6f37da032'\n\n    const encoded = encodeAbiParameters(\n      [{ type: 'bytes32' }, { type: 'address' }, { type: 'uint256' }],\n      [\n        keccak256(\n          encodeAbiParameters(\n            [\n              { type: 'address' },\n              { type: 'uint256' },\n              { type: 'bytes32' },\n              { type: 'bytes32' },\n              { type: 'bytes32' },\n              { type: 'uint256' },\n              { type: 'bytes32' },\n              { type: 'bytes32' },\n            ],\n            [\n              userOp.sender,\n              hexToBigInt(userOp.nonce),\n              keccak256(\n                'factory' in userOp &&\n                  'factoryData' in userOp &&\n                  userOp.factory &&\n                  userOp.factoryData\n                  ? concat([userOp.factory, userOp.factoryData])\n                  : 'initCode' in userOp\n                    ? userOp.initCode\n                    : '0x'\n              ),\n              keccak256(userOp.callData),\n              concat([\n                pad(userOp.verificationGasLimit, { size: 16 }),\n                pad(userOp.callGasLimit, { size: 16 }),\n              ]),\n              hexToBigInt(userOp.preVerificationGas),\n              concat([\n                pad(userOp.maxPriorityFeePerGas, { size: 16 }),\n                pad(userOp.maxFeePerGas, { size: 16 }),\n              ]),\n              keccak256(\n                'paymaster' in userOp &&\n                  userOp.paymaster &&\n                  isAddress(userOp.paymaster)\n                  ? concat([\n                    userOp.paymaster,\n                    pad(userOp.paymasterVerificationGasLimit, { size: 16 }),\n                    pad(userOp.paymasterPostOpGasLimit, { size: 16 }),\n                    userOp.paymasterData,\n                  ])\n                  : 'paymasterAndData' in userOp\n                    ? userOp.paymasterAndData\n                    : '0x'\n              ),\n            ]\n          )\n        ),\n        entryPoint,\n        BigInt(chainId),\n      ]\n    )\n\n    const userOpHash = keccak256(encoded)\n\n    return {\n      userOp,\n      hashToSign: Array.from(toBytes(hashMessage({ raw: userOpHash }))),\n    }\n  }\n\n  finalizeTransactionSigning({\n    transaction,\n    rsvSignatures,\n  }: {\n    transaction: EVMUnsignedTransaction\n    rsvSignatures: RSVSignature[]\n  }): `0x02${string}` {\n    const signature = this.transformRSVSignature(rsvSignatures[0])\n\n    return serializeTransaction(transaction, signature)\n  }\n\n  finalizeMessageSigning({\n    rsvSignature,\n  }: {\n    rsvSignature: RSVSignature\n  }): Hex {\n    return this.assembleSignature(rsvSignature)\n  }\n\n  finalizeTypedDataSigning({\n    rsvSignature,\n  }: {\n    rsvSignature: RSVSignature\n  }): Hex {\n    return this.assembleSignature(rsvSignature)\n  }\n\n  finalizeUserOpSigning({\n    userOp,\n    rsvSignature,\n  }: {\n    userOp: UserOperationV7 | UserOperationV6\n    rsvSignature: RSVSignature\n  }): UserOperationV7 | UserOperationV6 {\n    const { r, s, yParity } = this.transformRSVSignature(rsvSignature)\n    if (yParity === undefined) {\n      throw new Error('Missing yParity')\n    }\n\n    return {\n      ...userOp,\n      signature: concatHex([\n        '0x00', // Alchemy specific implementation. Biconomy doesn't include the 0x00 prefix.\n        r,\n        s,\n        numberToHex(Number(yParity + 27), { size: 1 }),\n      ]),\n    }\n  }\n\n  async broadcastTx(txSerialized: string): Promise<{ hash: Hash }> {\n    try {\n      const hash = await this.client.sendRawTransaction({\n        serializedTransaction: txSerialized as `0x${string}`,\n      })\n      return { hash: hash }\n    } catch (error) {\n      console.error('Transaction broadcast failed:', error)\n      throw new Error('Failed to broadcast transaction.')\n    }\n  }\n}\n","// Bitcoin\nexport { Bitcoin } from './Bitcoin'\n\nexport { BTCRpcAdapters, BTCRpcAdapter } from './BTCRpcAdapter'\n\nexport type {\n  BTCTransactionRequest,\n  BTCUnsignedTransaction,\n  BTCTransaction,\n  BTCOutput,\n  BTCInput,\n  BTCNetworkIds,\n} from './types'\n","import * as bitcoin from 'bitcoinjs-lib'\n\nimport { type BTCRpcAdapter } from '@chain-adapters/Bitcoin/BTCRpcAdapter'\nimport type {\n  BTCInput,\n  BTCNetworkIds,\n  BTCOutput,\n  BTCTransactionRequest,\n  BTCUnsignedTransaction,\n} from '@chain-adapters/Bitcoin/types'\nimport { parseBTCNetwork } from '@chain-adapters/Bitcoin/utils'\nimport { ChainAdapter } from '@chain-adapters/ChainAdapter'\nimport type { BaseChainSignatureContract } from '@contracts/ChainSignatureContract'\nimport type { HashToSign, RSVSignature, UncompressedPubKeySEC1 } from '@types'\nimport { cryptography } from '@utils'\n\n/**\n * Implementation of the ChainAdapter interface for Bitcoin network.\n * Handles interactions with both Bitcoin mainnet and testnet, supporting P2WPKH transactions.\n */\nexport class Bitcoin extends ChainAdapter<\n  BTCTransactionRequest,\n  BTCUnsignedTransaction\n> {\n  private static readonly SATOSHIS_PER_BTC = 100_000_000\n\n  private readonly network: BTCNetworkIds\n  private readonly btcRpcAdapter: BTCRpcAdapter\n  private readonly contract: BaseChainSignatureContract\n\n  /**\n   * Creates a new Bitcoin chain instance\n   * @param params - Configuration parameters\n   * @param params.network - Network identifier (mainnet/testnet)\n   * @param params.contract - Instance of the chain signature contract for MPC operations\n   * @param params.btcRpcAdapter - Bitcoin RPC adapter for network interactions\n   */\n  constructor({\n    network,\n    contract,\n    btcRpcAdapter,\n  }: {\n    network: BTCNetworkIds\n    contract: BaseChainSignatureContract\n    btcRpcAdapter: BTCRpcAdapter\n  }) {\n    super()\n\n    this.network = network\n    this.btcRpcAdapter = btcRpcAdapter\n    this.contract = contract\n  }\n\n  /**\n   * Converts satoshis to BTC\n   * @param satoshis - Amount in satoshis\n   * @returns Amount in BTC\n   */\n  static toBTC(satoshis: number): number {\n    return satoshis / Bitcoin.SATOSHIS_PER_BTC\n  }\n\n  /**\n   * Converts BTC to satoshis\n   * @param btc - Amount in BTC\n   * @returns Amount in satoshis (rounded)\n   */\n  static toSatoshi(btc: number): number {\n    return Math.round(btc * Bitcoin.SATOSHIS_PER_BTC)\n  }\n\n  private async fetchTransaction(\n    transactionId: string\n  ): Promise<bitcoin.Transaction> {\n    const data = await this.btcRpcAdapter.getTransaction(transactionId)\n    const tx = new bitcoin.Transaction()\n\n    data.vout.forEach((vout) => {\n      const scriptPubKey = Buffer.from(vout.scriptpubkey, 'hex')\n      tx.addOutput(scriptPubKey, Number(vout.value))\n    })\n\n    return tx\n  }\n\n  private static transformRSVSignature(signature: RSVSignature): Buffer {\n    const r = signature.r.padStart(64, '0')\n    const s = signature.s.padStart(64, '0')\n\n    const rawSignature = Buffer.from(r + s, 'hex')\n\n    if (rawSignature.length !== 64) {\n      throw new Error('Invalid signature length.')\n    }\n\n    return rawSignature\n  }\n\n  /**\n   * Creates a Partially Signed Bitcoin Transaction (PSBT)\n   * @param params - Parameters for creating the PSBT\n   * @param params.transactionRequest - Transaction request containing inputs and outputs\n   * @returns Created PSBT instance\n   */\n  async createPSBT({\n    transactionRequest,\n  }: {\n    transactionRequest: BTCTransactionRequest\n  }): Promise<bitcoin.Psbt> {\n    const { inputs, outputs } =\n      transactionRequest.inputs && transactionRequest.outputs\n        ? transactionRequest\n        : await this.btcRpcAdapter.selectUTXOs(transactionRequest.from, [\n            {\n              address: transactionRequest.to,\n              value: parseFloat(transactionRequest.value),\n            },\n          ])\n\n    const psbt = new bitcoin.Psbt({ network: parseBTCNetwork(this.network) })\n\n    await Promise.all(\n      inputs.map(async (input: BTCInput) => {\n        if (!input.scriptPubKey) {\n          const transaction = await this.fetchTransaction(input.txid)\n          const prevOut = transaction.outs[input.vout]\n          input.scriptPubKey = prevOut.script\n        }\n\n        // Prepare the input as P2WPKH\n        psbt.addInput({\n          hash: input.txid,\n          index: input.vout,\n          witnessUtxo: {\n            script: input.scriptPubKey,\n            value: input.value,\n          },\n        })\n      })\n    )\n\n    outputs.forEach((out: BTCOutput) => {\n      if ('address' in out) {\n        psbt.addOutput({\n          address: out.address,\n          value: out.value,\n        })\n      } else if ('script' in out) {\n        psbt.addOutput({\n          script: out.script,\n          value: out.value,\n        })\n      } else if (transactionRequest.from !== undefined) {\n        // Include change address from coinselect\n        psbt.addOutput({\n          value: Number(out.value),\n          address: transactionRequest.from,\n        })\n      }\n    })\n\n    return psbt\n  }\n\n  async getBalance(\n    address: string\n  ): Promise<{ balance: bigint; decimals: number }> {\n    const balance = BigInt(await this.btcRpcAdapter.getBalance(address))\n    return {\n      balance,\n      decimals: 8,\n    }\n  }\n\n  async deriveAddressAndPublicKey(\n    predecessor: string,\n    path: string\n  ): Promise<{ address: string; publicKey: string }> {\n    const uncompressedPubKey = await this.contract.getDerivedPublicKey({\n      path,\n      predecessor,\n    })\n\n    if (!uncompressedPubKey) {\n      throw new Error('Failed to get derived public key')\n    }\n\n    const derivedKey = cryptography.compressPubKey(\n      uncompressedPubKey as UncompressedPubKeySEC1\n    )\n    const publicKeyBuffer = Buffer.from(derivedKey, 'hex')\n    const network = parseBTCNetwork(this.network)\n\n    const payment = bitcoin.payments.p2wpkh({\n      pubkey: publicKeyBuffer,\n      network,\n    })\n\n    const { address } = payment\n\n    if (!address) {\n      throw new Error('Failed to generate Bitcoin address')\n    }\n\n    return { address, publicKey: derivedKey }\n  }\n\n  serializeTransaction(transaction: BTCUnsignedTransaction): string {\n    return JSON.stringify({\n      psbt: transaction.psbt.toHex(),\n      publicKey: transaction.publicKey,\n    })\n  }\n\n  deserializeTransaction(serialized: string): BTCUnsignedTransaction {\n    const transactionJSON = JSON.parse(serialized)\n    return {\n      psbt: bitcoin.Psbt.fromHex(transactionJSON.psbt as string),\n      publicKey: transactionJSON.publicKey,\n    }\n  }\n\n  async prepareTransactionForSigning(\n    transactionRequest: BTCTransactionRequest\n  ): Promise<{\n    transaction: BTCUnsignedTransaction\n    hashesToSign: HashToSign[]\n  }> {\n    const publicKeyBuffer = Buffer.from(transactionRequest.publicKey, 'hex')\n    const psbt = await this.createPSBT({\n      transactionRequest,\n    })\n\n    // We can't double sign a PSBT, therefore we serialize the payload before to return it\n    const psbtHex = psbt.toHex()\n\n    const hashesToSign: HashToSign[] = []\n\n    const mockKeyPair = (index: number): bitcoin.Signer => ({\n      publicKey: publicKeyBuffer,\n      sign: (hash: Buffer): Buffer => {\n        hashesToSign[index] = Array.from(hash)\n        // Return dummy signature to satisfy the interface\n        return Buffer.alloc(64)\n      },\n    })\n\n    for (let index = 0; index < psbt.inputCount; index++) {\n      psbt.signInput(index, mockKeyPair(index))\n    }\n\n    return {\n      transaction: {\n        psbt: bitcoin.Psbt.fromHex(psbtHex),\n        publicKey: transactionRequest.publicKey,\n      },\n      hashesToSign,\n    }\n  }\n\n  finalizeTransactionSigning({\n    transaction: { psbt, publicKey },\n    rsvSignatures,\n  }: {\n    transaction: BTCUnsignedTransaction\n    rsvSignatures: RSVSignature[]\n  }): string {\n    const publicKeyBuffer = Buffer.from(publicKey, 'hex')\n\n    const keyPair = (index: number): bitcoin.Signer => ({\n      publicKey: publicKeyBuffer,\n      sign: () => {\n        const mpcSignature = rsvSignatures[index]\n        return Bitcoin.transformRSVSignature(mpcSignature)\n      },\n    })\n\n    for (let index = 0; index < psbt.inputCount; index++) {\n      psbt.signInput(index, keyPair(index))\n    }\n\n    psbt.finalizeAllInputs()\n    return psbt.extractTransaction().toHex()\n  }\n\n  async broadcastTx(txSerialized: string): Promise<{ hash: string }> {\n    const txId = await this.btcRpcAdapter.broadcastTransaction(txSerialized)\n    return { hash: txId }\n  }\n}\n","import * as bitcoin from 'bitcoinjs-lib'\n\nexport function parseBTCNetwork(network: string): bitcoin.networks.Network {\n  switch (network.toLowerCase()) {\n    case 'mainnet':\n      return bitcoin.networks.bitcoin\n    case 'testnet':\n      return bitcoin.networks.testnet\n    case 'regtest':\n      return bitcoin.networks.regtest\n    default:\n      throw new Error(`Unknown Bitcoin network: ${network}`)\n  }\n}\n","// There is no types for coinselect\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-expect-error\n\nimport coinselect from 'coinselect'\n\nimport { BTCRpcAdapter } from '@chain-adapters/Bitcoin/BTCRpcAdapter/BTCRpcAdapter'\nimport {\n  type BTCFeeRecommendation,\n  type UTXO,\n} from '@chain-adapters/Bitcoin/BTCRpcAdapter/Mempool/types'\nimport type {\n  BTCTransaction,\n  BTCInput,\n  BTCOutput,\n} from '@chain-adapters/Bitcoin/types'\n\nexport class Mempool extends BTCRpcAdapter {\n  private readonly providerUrl: string\n\n  constructor(providerUrl: string) {\n    super()\n    this.providerUrl = providerUrl\n  }\n\n  private async fetchFeeRate(confirmationTarget = 6): Promise<number> {\n    const response = await fetch(`${this.providerUrl}/v1/fees/recommended`)\n    const data = (await response.json()) as BTCFeeRecommendation\n\n    if (confirmationTarget <= 1) {\n      return data.fastestFee\n    } else if (confirmationTarget <= 3) {\n      return data.halfHourFee\n    } else if (confirmationTarget <= 6) {\n      return data.hourFee\n    } else {\n      return data.economyFee\n    }\n  }\n\n  private async fetchUTXOs(address: string): Promise<UTXO[]> {\n    try {\n      const response = await fetch(\n        `${this.providerUrl}/address/${address}/utxo`\n      )\n      return (await response.json()) as UTXO[]\n    } catch (error) {\n      console.error('Failed to fetch UTXOs:', error)\n      return []\n    }\n  }\n\n  async selectUTXOs(\n    from: string,\n    targets: BTCOutput[],\n    confirmationTarget = 6\n  ): Promise<{ inputs: BTCInput[]; outputs: BTCOutput[] }> {\n    const utxos = await this.fetchUTXOs(from)\n    const feeRate = await this.fetchFeeRate(confirmationTarget)\n\n    // Add a small amount to the fee rate to ensure the transaction is confirmed\n    const ret = coinselect(utxos, targets, Math.ceil(feeRate + 1))\n\n    if (!ret.inputs || !ret.outputs) {\n      throw new Error(\n        'Invalid transaction: coinselect failed to find a suitable set of inputs and outputs. This could be due to insufficient funds, or no inputs being available that meet the criteria.'\n      )\n    }\n\n    return {\n      inputs: ret.inputs,\n      outputs: ret.outputs,\n    }\n  }\n\n  async broadcastTransaction(transactionHex: string): Promise<string> {\n    const response = await fetch(`${this.providerUrl}/tx`, {\n      method: 'POST',\n      body: transactionHex,\n    })\n\n    if (response.ok) {\n      return await response.text()\n    }\n\n    throw new Error(`Failed to broadcast transaction: ${await response.text()}`)\n  }\n\n  async getBalance(address: string): Promise<number> {\n    const response = await fetch(`${this.providerUrl}/address/${address}`)\n    const data = (await response.json()) as {\n      chain_stats: { funded_txo_sum: number; spent_txo_sum: number }\n    }\n    return data.chain_stats.funded_txo_sum - data.chain_stats.spent_txo_sum\n  }\n\n  async getTransaction(txid: string): Promise<BTCTransaction> {\n    const response = await fetch(`${this.providerUrl}/tx/${txid}`)\n    return (await response.json()) as BTCTransaction\n  }\n}\n","import type {\n  BTCTransaction,\n  BTCInput,\n  BTCOutput,\n} from '@chain-adapters/Bitcoin/types'\n\nexport abstract class BTCRpcAdapter {\n  abstract selectUTXOs(\n    from: string,\n    targets: BTCOutput[]\n  ): Promise<{ inputs: BTCInput[]; outputs: BTCOutput[] }>\n  abstract broadcastTransaction(transactionHex: string): Promise<string>\n  abstract getBalance(address: string): Promise<number>\n  abstract getTransaction(txid: string): Promise<BTCTransaction>\n}\n","import { Mempool } from './Mempool'\nexport { BTCRpcAdapter } from './BTCRpcAdapter'\n\nexport const BTCRpcAdapters = {\n  Mempool,\n}\n","// Cosmos\nexport { Cosmos } from './Cosmos'\n\nexport type {\n  CosmosNetworkIds,\n  CosmosTransactionRequest,\n  CosmosUnsignedTransaction,\n} from './types'\n","import { chains, assets } from 'chain-registry'\n\nimport { type ChainInfo } from '@chain-adapters/Cosmos/types'\n\nexport const fetchChainInfo = async (chainId: string): Promise<ChainInfo> => {\n  const chainInfo = chains.find((chain) => chain.chain_id === chainId)\n  if (!chainInfo) {\n    throw new Error(`Chain info not found for chainId: ${chainId}`)\n  }\n\n  const { bech32_prefix: prefix, chain_id: expectedChainId } = chainInfo\n  const denom = chainInfo.staking?.staking_tokens?.[0]?.denom\n  const rpcUrl = chainInfo.apis?.rpc?.[0]?.address\n  const restUrl = chainInfo.apis?.rest?.[0]?.address\n  const gasPrice = chainInfo.fees?.fee_tokens?.[0]?.average_gas_price\n\n  if (\n    !prefix ||\n    !denom ||\n    !rpcUrl ||\n    !restUrl ||\n    !expectedChainId ||\n    gasPrice === undefined\n  ) {\n    throw new Error(\n      `Missing required chain information for ${chainInfo.chain_name}`\n    )\n  }\n\n  const assetList = assets.find(\n    (asset) => asset.chain_name === chainInfo.chain_name\n  )\n  const asset = assetList?.assets.find((asset) => asset.base === denom)\n  const decimals = asset?.denom_units.find(\n    (unit) => unit.denom === asset.display\n  )?.exponent\n\n  if (decimals === undefined) {\n    throw new Error(\n      `Could not find decimals for ${denom} on chain ${chainInfo.chain_name}`\n    )\n  }\n\n  return { prefix, denom, rpcUrl, restUrl, expectedChainId, gasPrice, decimals }\n}\n","import { encodeSecp256k1Pubkey } from '@cosmjs/amino'\nimport { ripemd160, sha256 } from '@cosmjs/crypto'\nimport { toBase64, fromBase64, fromHex } from '@cosmjs/encoding'\nimport {\n  Registry,\n  makeSignBytes,\n  encodePubkey,\n  makeAuthInfoBytes,\n  makeSignDoc,\n  type TxBodyEncodeObject,\n} from '@cosmjs/proto-signing'\nimport { GasPrice, StargateClient, calculateFee } from '@cosmjs/stargate'\nimport { bech32 } from 'bech32'\nimport { SignMode } from 'cosmjs-types/cosmos/tx/signing/v1beta1/signing'\nimport { TxRaw } from 'cosmjs-types/cosmos/tx/v1beta1/tx'\n\nimport { ChainAdapter } from '@chain-adapters/ChainAdapter'\nimport type {\n  CosmosNetworkIds,\n  CosmosTransactionRequest,\n  CosmosUnsignedTransaction,\n  ChainInfo,\n  BalanceResponse,\n} from '@chain-adapters/Cosmos/types'\nimport { fetchChainInfo } from '@chain-adapters/Cosmos/utils'\nimport type { BaseChainSignatureContract } from '@contracts/ChainSignatureContract'\nimport type { HashToSign, RSVSignature, UncompressedPubKeySEC1 } from '@types'\nimport { cryptography } from '@utils'\n\n/**\n * Implementation of the ChainAdapter interface for Cosmos-based networks.\n * Handles interactions with Cosmos SDK chains like Cosmos Hub, Osmosis, etc.\n */\nexport class Cosmos extends ChainAdapter<\n  CosmosTransactionRequest,\n  CosmosUnsignedTransaction\n> {\n  private readonly registry: Registry\n  private readonly chainId: CosmosNetworkIds\n  private readonly contract: BaseChainSignatureContract\n  private readonly endpoints?: {\n    rpcUrl?: string\n    restUrl?: string\n  }\n\n  /**\n   * Creates a new Cosmos chain instance\n   * @param params - Configuration parameters\n   * @param params.chainId - Chain id for the Cosmos network\n   * @param params.contract - Instance of the chain signature contract for MPC operations\n   * @param params.endpoints - Optional RPC and REST endpoints\n   * @param params.endpoints.rpcUrl - Optional RPC endpoint URL\n   * @param params.endpoints.restUrl - Optional REST endpoint URL\n   */\n  constructor({\n    chainId,\n    contract,\n    endpoints,\n  }: {\n    contract: BaseChainSignatureContract\n    chainId: CosmosNetworkIds\n    endpoints?: {\n      rpcUrl?: string\n      restUrl?: string\n    }\n  }) {\n    super()\n\n    this.contract = contract\n    this.registry = new Registry()\n    this.chainId = chainId\n    this.endpoints = endpoints\n  }\n\n  private transformRSVSignature(rsvSignature: RSVSignature): Uint8Array {\n    return new Uint8Array([\n      ...fromHex(rsvSignature.r),\n      ...fromHex(rsvSignature.s),\n    ])\n  }\n\n  private async getChainInfo(): Promise<ChainInfo> {\n    return {\n      ...(await fetchChainInfo(this.chainId)),\n      ...this.endpoints,\n    }\n  }\n\n  async getBalance(\n    address: string\n  ): Promise<{ balance: bigint; decimals: number }> {\n    try {\n      const { restUrl, denom, decimals } = await this.getChainInfo()\n\n      const response = await fetch(\n        `${restUrl}/cosmos/bank/v1beta1/balances/${address}`\n      )\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const data = (await response.json()) as BalanceResponse\n      const balance = data.balances.find((b) => b.denom === denom)\n      const amount = balance?.amount ?? '0'\n\n      return {\n        balance: BigInt(amount),\n        decimals,\n      }\n    } catch (error) {\n      console.error('Failed to fetch Cosmos balance:', error)\n      throw new Error('Failed to fetch Cosmos balance')\n    }\n  }\n\n  async deriveAddressAndPublicKey(\n    predecessor: string,\n    path: string\n  ): Promise<{\n    address: string\n    publicKey: string\n  }> {\n    const { prefix } = await this.getChainInfo()\n    const uncompressedPubKey = await this.contract.getDerivedPublicKey({\n      path,\n      predecessor,\n    })\n\n    if (!uncompressedPubKey) {\n      throw new Error('Failed to get derived public key')\n    }\n\n    const derivedKey = cryptography.compressPubKey(\n      uncompressedPubKey as UncompressedPubKeySEC1\n    )\n    const pubKeySha256 = sha256(fromHex(derivedKey))\n    const ripemd160Hash = ripemd160(pubKeySha256)\n    const address = bech32.encode(prefix, bech32.toWords(ripemd160Hash))\n\n    return { address, publicKey: derivedKey }\n  }\n\n  serializeTransaction(transaction: CosmosUnsignedTransaction): string {\n    const serialized = TxRaw.encode(transaction).finish()\n    return toBase64(serialized)\n  }\n\n  deserializeTransaction(serialized: string): CosmosUnsignedTransaction {\n    return TxRaw.decode(fromBase64(serialized))\n  }\n\n  async prepareTransactionForSigning(\n    transactionRequest: CosmosTransactionRequest\n  ): Promise<{\n    transaction: CosmosUnsignedTransaction\n    hashesToSign: HashToSign[]\n  }> {\n    const { denom, rpcUrl, gasPrice } = await this.getChainInfo()\n    const publicKeyBytes = fromHex(transactionRequest.publicKey)\n\n    const gasLimit = transactionRequest.gas || 200_000\n\n    const fee = calculateFee(\n      gasLimit,\n      GasPrice.fromString(`${gasPrice}${denom}`)\n    )\n\n    const client = await StargateClient.connect(rpcUrl)\n    const accountOnChain = await client.getAccount(transactionRequest.address)\n    if (!accountOnChain) {\n      throw new Error(\n        `Account ${transactionRequest.address} does not exist on chain`\n      )\n    }\n\n    const { accountNumber, sequence } = accountOnChain\n\n    const txBodyEncodeObject: TxBodyEncodeObject = {\n      typeUrl: '/cosmos.tx.v1beta1.TxBody',\n      value: {\n        messages: transactionRequest.messages,\n        memo: transactionRequest.memo || '',\n      },\n    }\n\n    const txBodyBytes = this.registry.encode(txBodyEncodeObject)\n\n    const pubkey = encodePubkey(encodeSecp256k1Pubkey(publicKeyBytes))\n\n    // TODO: Allow caller to provide: multiple signers, fee payer, fee granter\n    const authInfoBytes = makeAuthInfoBytes(\n      [\n        {\n          pubkey,\n          sequence,\n        },\n      ],\n      fee.amount,\n      Number(fee.gas),\n      undefined,\n      undefined,\n      SignMode.SIGN_MODE_DIRECT\n    )\n\n    const signDoc = makeSignDoc(\n      txBodyBytes,\n      authInfoBytes,\n      this.chainId,\n      accountNumber\n    )\n\n    const signBytes = makeSignBytes(signDoc)\n    const payload = Array.from(sha256(signBytes))\n\n    return {\n      transaction: TxRaw.fromPartial({\n        bodyBytes: txBodyBytes,\n        authInfoBytes,\n        signatures: [],\n      }),\n      hashesToSign: [payload],\n    }\n  }\n\n  finalizeTransactionSigning({\n    transaction,\n    rsvSignatures,\n  }: {\n    transaction: CosmosUnsignedTransaction\n    rsvSignatures: RSVSignature[]\n  }): string {\n    // Allow support for multi-sig but the package only supports single-sig\n    transaction.signatures = rsvSignatures.map((sig) =>\n      this.transformRSVSignature(sig)\n    )\n\n    const txBytes = TxRaw.encode(transaction).finish()\n    return Buffer.from(txBytes).toString('hex')\n  }\n\n  // @ts-expect-error - TODO: fix this\n  async broadcastTx(txSerialized: string): Promise<string> {\n    try {\n      const { rpcUrl } = await this.getChainInfo()\n      const client = await StargateClient.connect(rpcUrl)\n\n      const txBytes = fromHex(txSerialized)\n      const broadcastResponse = await client.broadcastTx(txBytes)\n\n      if (broadcastResponse.code !== 0) {\n        throw new Error(`Broadcast error: ${broadcastResponse.rawLog}`)\n      }\n\n      return broadcastResponse.transactionHash\n    } catch (error) {\n      console.error('Transaction broadcast failed:', error)\n      throw new Error('Failed to broadcast transaction.')\n    }\n  }\n}\n","export * from './Solana'\nexport * from './types'\n","import type { Connection as SolanaConnection } from '@solana/web3.js'\nimport { PublicKey, Transaction, SystemProgram } from '@solana/web3.js'\nimport type BN from 'bn.js'\n\nimport type { BaseChainSignatureContract } from '@contracts/ChainSignatureContract'\nimport type { HashToSign, Signature } from '@types'\n\nimport { ChainAdapter } from '../ChainAdapter'\n\nimport type {\n  SolanaTransactionRequest,\n  SolanaUnsignedTransaction,\n} from './types'\n\nconst toBigInt = (value: bigint | BN): bigint => {\n  if (typeof value === 'bigint') return value\n  return BigInt(value.toString())\n}\n\nexport class Solana extends ChainAdapter<\n  SolanaTransactionRequest,\n  SolanaUnsignedTransaction\n> {\n  private readonly connection: SolanaConnection\n  private readonly contract: BaseChainSignatureContract\n\n  constructor(args: {\n    solanaConnection: SolanaConnection\n    contract: BaseChainSignatureContract\n  }) {\n    super()\n    this.connection = args.solanaConnection\n    this.contract = args.contract\n  }\n\n  async getBalance(\n    address: string\n  ): Promise<{ balance: bigint; decimals: number }> {\n    const pubkey = new PublicKey(address)\n    const balance = await this.connection.getBalance(pubkey)\n    return {\n      balance: BigInt(balance),\n      decimals: 9, // Solana uses 9 decimals (LAMPORTS_PER_SOL)\n    }\n  }\n\n  async deriveAddressAndPublicKey(\n    predecessor: string,\n    path: string\n  ): Promise<{ address: string; publicKey: string }> {\n    const pubKey = await this.contract.getDerivedPublicKey({\n      path,\n      predecessor,\n      IsEd25519: true,\n    })\n\n    const base58Key = pubKey.replace('ed25519:', '')\n    const publicKey = new PublicKey(base58Key)\n\n    return {\n      address: publicKey.toBase58(),\n      publicKey: publicKey.toString(),\n    }\n  }\n\n  serializeTransaction(transaction: SolanaUnsignedTransaction): string {\n    return Buffer.from(\n      transaction.transaction.serialize({\n        requireAllSignatures: false,\n      })\n    ).toString('base64')\n  }\n\n  deserializeTransaction(serialized: string): SolanaUnsignedTransaction {\n    const buffer = Buffer.from(serialized, 'base64')\n    const transaction = Transaction.from(buffer)\n\n    return {\n      transaction,\n      feePayer:\n        transaction.feePayer ||\n        new PublicKey('11111111111111111111111111111111'),\n      recentBlockhash: transaction.recentBlockhash || '',\n    }\n  }\n\n  async prepareTransactionForSigning(\n    request: SolanaTransactionRequest\n  ): Promise<{\n    transaction: SolanaUnsignedTransaction\n    hashesToSign: HashToSign[]\n  }> {\n    const transaction = new Transaction()\n\n    // Add transfer instruction if amount is specified\n    const amount = toBigInt(request.amount)\n    if (amount > 0n) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: new PublicKey(request.from),\n          toPubkey: new PublicKey(request.to),\n          lamports: Number(amount),\n        })\n      )\n    }\n\n    // Add any additional instructions\n    if (request.instructions) {\n      transaction.add(...request.instructions)\n    }\n\n    // Get recent blockhash\n    const { blockhash } = await this.connection.getLatestBlockhash()\n    transaction.recentBlockhash = blockhash\n\n    // Set fee payer\n    transaction.feePayer = request.feePayer || new PublicKey(request.from)\n\n    const messageBytes = transaction.compileMessage().serialize()\n\n    return {\n      transaction: {\n        transaction,\n        feePayer: transaction.feePayer,\n        recentBlockhash: blockhash,\n      },\n      hashesToSign: [Array.from(messageBytes)],\n    }\n  }\n\n  finalizeTransactionSigning({\n    transaction,\n    rsvSignatures,\n    senderAddress,\n  }: {\n    transaction: Transaction\n    rsvSignatures: Signature\n    senderAddress: string\n  }): string {\n    const signatureBuffer = Buffer.from(rsvSignatures.signature)\n    transaction.addSignature(new PublicKey(senderAddress), signatureBuffer)\n    return transaction.serialize().toString('base64')\n  }\n\n  async broadcastTx(txSerialized: string): Promise<{ hash: string }> {\n    const transaction = this.deserializeTransaction(txSerialized)\n\n    const signature = await this.connection.sendRawTransaction(\n      transaction.transaction.serialize()\n    )\n\n    return { hash: signature }\n  }\n}\n","export { ChainSignatureContract, type SignArgs } from './ChainSignatureContract'\n\nexport * as near from './near'\nexport * as evm from './evm'\n","import type BN from 'bn.js'\n\nimport type {\n  RSVSignature,\n  UncompressedPubKeySEC1,\n  Ed25519PubKey,\n  DerivedPublicKeyArgs,\n} from '../types'\n\nexport interface ArgsEd25519 extends DerivedPublicKeyArgs {\n  IsEd25519: boolean\n}\n\nexport interface SignArgs {\n  /** The payload to sign as an array of 32 bytes */\n  payload: number[]\n  /** The derivation path for key generation */\n  path: string\n  /** Version of the key to use */\n  key_version: number\n}\n\n/**\n * Base contract interface required for compatibility with ChainAdapter instances like EVM and Bitcoin.\n *\n * See {@link EVM} and {@link Bitcoin} for example implementations.\n */\nexport abstract class BaseChainSignatureContract {\n  /**\n   * Gets the current signature deposit required by the contract.\n   * This deposit amount helps manage network congestion.\n   *\n   * @returns Promise resolving to the required deposit amount as a BigNumber\n   */\n  abstract getCurrentSignatureDeposit(): Promise<BN>\n\n  /**\n   * Gets the derived public key for a given path and predecessor.\n   *\n   * @param args - Arguments for key derivation\n   * @param args.path - The path to use derive the key\n   * @param args.predecessor - The id/address of the account requesting signature\n   * @param args.IsEd25519 - Flag indicating if the key is Ed25519\n   * @returns Promise resolving to the derived SEC1 uncompressed public key\n   */\n  // abstract getDerivedPublicKey(args: ArgsEd25519): Promise<Ed25519PubKey>\n  abstract getDerivedPublicKey(\n    args: DerivedPublicKeyArgs | ArgsEd25519\n  ): Promise<UncompressedPubKeySEC1 | Ed25519PubKey>\n}\n\n/**\n * Full contract interface that extends BaseChainSignatureContract to provide all Sig Network Smart Contract capabilities.\n */\nexport abstract class ChainSignatureContract extends BaseChainSignatureContract {\n  /**\n   * Signs a payload using Sig Network MPC.\n   *\n   * @param args - Arguments for the signing operation\n   * @param args.payload - The data to sign as an array of 32 bytes\n   * @param args.path - The string path to use derive the key\n   * @param args.key_version - Version of the key to use\n   * @returns Promise resolving to the RSV signature\n   */\n  abstract sign(args: SignArgs & Record<string, unknown>): Promise<RSVSignature>\n\n  /**\n   * Gets the public key associated with this contract instance.\n   *\n   * @returns Promise resolving to the SEC1 uncompressed public key\n   */\n  abstract getPublicKey(): Promise<UncompressedPubKeySEC1>\n}\n","import * as signAndSend from './signAndSend'\nimport * as transaction from './transaction'\nexport * from './ChainSignatureContract'\n\nconst utils = {\n  transaction,\n  signAndSend,\n}\n\nexport { utils }\n","export * as keypair from './keypair'\n","import { type KeyPair } from '@near-js/crypto'\n\nimport * as chainAdapters from '@chain-adapters'\nimport { BTCRpcAdapters } from '@chain-adapters/Bitcoin/BTCRpcAdapter'\nimport { getNearAccount } from '@contracts/near/account'\nimport { ChainSignatureContract } from '@contracts/near/ChainSignatureContract'\nimport {\n  type Response,\n  type BitcoinRequest,\n  type CosmosRequest,\n  type EVMRequest,\n} from '@contracts/near/types'\nimport { createPublicClient, http } from 'viem';\n\nexport const EVMTransaction = async (\n  req: EVMRequest,\n  keyPair: KeyPair\n): Promise<Response> => {\n  try {\n    const account = await getNearAccount({\n      networkId: req.nearAuthentication.networkId,\n      accountId: req.nearAuthentication.accountId,\n      keypair: keyPair,\n    })\n\n    const contract = new ChainSignatureContract({\n      networkId: req.nearAuthentication.networkId,\n      contractId: req.chainConfig.contract,\n      accountId: account.accountId,\n      keypair: keyPair,\n    })\n\n    const evm = new chainAdapters.evm.EVM({\n      publicClient: createPublicClient({\n        transport: http(req.chainConfig.providerUrl),\n      }),\n      contract,\n    })\n\n    const { transaction, hashesToSign } =\n      await evm.prepareTransactionForSigning(req.transaction)\n\n    const signature = await contract.sign({\n      payload: hashesToSign[0],\n      path: req.derivationPath,\n      key_version: 0,\n    })\n\n    const txSerialized = evm.finalizeTransactionSigning({\n      transaction,\n      rsvSignatures: [signature],\n    })\n\n    const txHash = await evm.broadcastTx(txSerialized)\n\n    return {\n      transactionHash: txHash.hash,\n      success: true,\n    }\n  } catch (e: unknown) {\n    console.error(e)\n    return {\n      success: false,\n      errorMessage: e instanceof Error ? e.message : String(e),\n    }\n  }\n}\n\nexport const BTCTransaction = async (\n  req: BitcoinRequest,\n  keyPair: KeyPair\n): Promise<Response> => {\n  try {\n    const account = await getNearAccount({\n      networkId: req.nearAuthentication.networkId,\n      accountId: req.nearAuthentication.accountId,\n      keypair: keyPair,\n    })\n\n    const contract = new ChainSignatureContract({\n      networkId: req.nearAuthentication.networkId,\n      contractId: req.chainConfig.contract,\n      accountId: account.accountId,\n      keypair: keyPair,\n    })\n\n    const btc = new chainAdapters.btc.Bitcoin({\n      btcRpcAdapter: new BTCRpcAdapters.Mempool(req.chainConfig.providerUrl),\n      contract,\n      network: req.chainConfig.network,\n    })\n\n    const { transaction, hashesToSign } =\n      await btc.prepareTransactionForSigning(req.transaction)\n\n    const signatures = await Promise.all(\n      hashesToSign.map(\n        async (payload) =>\n          await contract.sign({\n            payload,\n            path: req.derivationPath,\n            key_version: 0,\n          })\n      )\n    )\n\n    const txSerialized = btc.finalizeTransactionSigning({\n      transaction,\n      rsvSignatures: signatures,\n    })\n\n    const txHash = await btc.broadcastTx(txSerialized)\n\n    return {\n      transactionHash: txHash.hash,\n      success: true,\n    }\n  } catch (e: unknown) {\n    return {\n      success: false,\n      errorMessage: e instanceof Error ? e.message : String(e),\n    }\n  }\n}\n\nexport const CosmosTransaction = async (\n  req: CosmosRequest,\n  keyPair: KeyPair\n): Promise<Response> => {\n  try {\n    const account = await getNearAccount({\n      networkId: req.nearAuthentication.networkId,\n      accountId: req.nearAuthentication.accountId,\n      keypair: keyPair,\n    })\n\n    const contract = new ChainSignatureContract({\n      networkId: req.nearAuthentication.networkId,\n      contractId: req.chainConfig.contract,\n      accountId: account.accountId,\n      keypair: keyPair,\n    })\n\n    const cosmos = new chainAdapters.cosmos.Cosmos({\n      contract,\n      chainId: req.chainConfig.chainId,\n    })\n\n    const { transaction, hashesToSign } =\n      await cosmos.prepareTransactionForSigning(req.transaction)\n\n    const signatures = await Promise.all(\n      hashesToSign.map(\n        async (payload) =>\n          await contract.sign({\n            payload,\n            path: req.derivationPath,\n            key_version: 0,\n          })\n      )\n    )\n\n    const txSerialized = cosmos.finalizeTransactionSigning({\n      transaction,\n      rsvSignatures: signatures,\n    })\n\n    const txHash = await cosmos.broadcastTx(txSerialized)\n\n    return {\n      transactionHash: txHash,\n      success: true,\n    }\n  } catch (e: unknown) {\n    console.error(e)\n    return {\n      success: false,\n      errorMessage: e instanceof Error ? e.message : String(e),\n    }\n  }\n}\n","import BN from 'bn.js'\n\nexport const NEAR_MAX_GAS = new BN('300000000000000')\nexport const DONT_CARE_ACCOUNT_ID = 'dontcare'\n","import { Account, Connection } from '@near-js/accounts'\nimport { KeyPair } from '@near-js/crypto'\nimport { InMemoryKeyStore } from '@near-js/keystores'\n\nimport { DONT_CARE_ACCOUNT_ID } from '@contracts/near/constants'\n\ntype SetConnectionArgs =\n  | {\n      networkId: string\n      accountId: string\n      keypair: KeyPair\n    }\n  | {\n      networkId: string\n      accountId?: never\n      keypair?: never\n    }\n\nexport const getNearAccount = async ({\n  networkId,\n  accountId = DONT_CARE_ACCOUNT_ID,\n  keypair = KeyPair.fromRandom('ed25519'),\n}: SetConnectionArgs): Promise<Account> => {\n  const keyStore = new InMemoryKeyStore()\n  await keyStore.setKey(networkId, accountId, keypair)\n\n  const connection = Connection.fromConfig({\n    networkId,\n    provider: {\n      type: 'JsonRpcProvider',\n      args: {\n        url: {\n          testnet: 'https://rpc.testnet.near.org',\n          mainnet: 'https://rpc.mainnet.near.org',\n        }[networkId],\n      },\n    },\n    signer: { type: 'InMemorySigner', keyStore },\n  })\n\n  return new Account(connection, accountId)\n}\n","import { CONTRACT_ADDRESSES, ROOT_PUBLIC_KEYS, type CHAINS } from '@constants'\nimport type { NajPublicKey } from '@types'\n\nexport const getRootPublicKey = (\n  contractAddress: string,\n  chain: keyof typeof CHAINS\n): NajPublicKey | undefined => {\n  const environment = Object.entries(CONTRACT_ADDRESSES[chain]).find(\n    ([_, address]) => address.toLowerCase() === contractAddress.toLowerCase()\n  )?.[0] as keyof typeof ROOT_PUBLIC_KEYS | undefined\n\n  if (environment) {\n    return ROOT_PUBLIC_KEYS[environment]\n  }\n\n  return undefined\n}\n","import { InMemoryKeyStore } from '@near-js/keystores'\nimport type { Action as TransactionAction } from '@near-js/transactions'\nimport type { TxExecutionStatus } from '@near-js/types'\nimport type {\n  Action as WalletAction,\n  FinalExecutionOutcome,\n  NetworkId,\n} from '@near-wallet-selector/core'\nimport BN from 'bn.js'\nimport {\n  transactions,\n  utils as nearUtils,\n  connect,\n  type KeyPair,\n} from 'near-api-js'\nimport { getTransactionLastResult } from 'near-api-js/lib/providers'\nimport { withRetry } from 'viem'\n\nimport { ChainSignatureContract } from '@contracts/near/ChainSignatureContract'\nimport { NEAR_MAX_GAS } from '@contracts/near/constants'\nimport { type ChainSignatureContractIds } from '@contracts/near/types'\nimport {\n  type RSVSignature,\n  type KeyDerivationPath,\n  type MPCSignature,\n  type HashToSign,\n} from '@types'\nimport { cryptography } from '@utils'\n\nexport const mpcPayloadsToChainSigTransaction = async ({\n  networkId,\n  contractId,\n  hashesToSign,\n  path,\n}: {\n  networkId: NetworkId\n  contractId: ChainSignatureContractIds\n  hashesToSign: HashToSign[]\n  path: KeyDerivationPath\n}): Promise<{\n  receiverId: string\n  actions: WalletAction[]\n}> => {\n  const contract = new ChainSignatureContract({\n    networkId,\n    contractId,\n  })\n\n  const currentContractFee = await contract.getCurrentSignatureDeposit()\n\n  return {\n    receiverId: contractId,\n    actions: hashesToSign.map((payload) => ({\n      type: 'FunctionCall',\n      params: {\n        methodName: 'sign',\n        args: {\n          request: {\n            payload: Array.from(payload),\n            path,\n            key_version: 0,\n          },\n        },\n        gas: NEAR_MAX_GAS.div(new BN(hashesToSign.length)).toString(),\n        deposit: currentContractFee?.toString() || '1',\n      },\n    })),\n  }\n}\n\nexport const responseToMpcSignature = ({\n  response,\n}: {\n  response: FinalExecutionOutcome\n}): RSVSignature | undefined => {\n  const signature = getTransactionLastResult(response) as MPCSignature\n\n  if (signature) {\n    return cryptography.toRSV(signature)\n  } else {\n    return undefined\n  }\n}\n\nexport interface SendTransactionOptions {\n  until: TxExecutionStatus\n  retryCount: number\n  delay: number\n  nodeUrl: string\n}\n\nexport const sendTransactionUntil = async ({\n  accountId,\n  keypair,\n  networkId,\n  receiverId,\n  actions,\n  nonce,\n  options = {\n    until: 'EXECUTED_OPTIMISTIC',\n    retryCount: 3,\n    delay: 5000, // Near RPC timeout\n    nodeUrl:\n      networkId === 'testnet'\n        ? 'https://test.rpc.fastnear.com'\n        : 'https://free.rpc.fastnear.com',\n  },\n}: {\n  accountId: string\n  keypair: KeyPair\n  networkId: NetworkId\n  receiverId: string\n  actions: TransactionAction[]\n  nonce?: number\n  options?: SendTransactionOptions\n}): Promise<FinalExecutionOutcome> => {\n  const keyStore = new InMemoryKeyStore()\n  await keyStore.setKey(networkId, accountId, keypair)\n\n  const near = await connect({\n    networkId,\n    keyStore,\n    nodeUrl: options.nodeUrl,\n  })\n\n  const { signer } = near.connection\n  const publicKey = await signer.getPublicKey(\n    accountId,\n    near.connection.networkId\n  )\n\n  const accessKey = (await near.connection.provider.query(\n    `access_key/${accountId}/${publicKey.toString()}`,\n    ''\n  )) as unknown as {\n    block_hash: string\n    block_height: number\n    nonce: number\n    permission: string\n  }\n\n  const recentBlockHash = nearUtils.serialize.base_decode(accessKey.block_hash)\n\n  const tx = transactions.createTransaction(\n    accountId,\n    publicKey,\n    receiverId,\n    nonce ?? ++accessKey.nonce,\n    actions,\n    recentBlockHash\n  )\n\n  const serializedTx = nearUtils.serialize.serialize(\n    transactions.SCHEMA.Transaction,\n    tx\n  )\n\n  const nearTransactionSignature = await signer.signMessage(\n    serializedTx,\n    accountId,\n    near.connection.networkId\n  )\n\n  const signedTransaction = new transactions.SignedTransaction({\n    transaction: tx,\n    signature: new transactions.Signature({\n      keyType: tx.publicKey.keyType,\n      data: nearTransactionSignature.signature,\n    }),\n  })\n\n  const { transaction } = await near.connection.provider.sendTransactionUntil(\n    signedTransaction,\n    'INCLUDED_FINAL'\n  )\n\n  const txHash = transaction.hash as string | undefined\n\n  if (!txHash) {\n    throw new Error('No transaction hash found')\n  }\n\n  return await withRetry(\n    async () => {\n      const txOutcome = await near.connection.provider.txStatus(\n        txHash,\n        accountId,\n        options.until\n      )\n\n      if (txOutcome) {\n        return txOutcome\n      }\n\n      throw new Error('Transaction not found')\n    },\n    {\n      retryCount: options.retryCount,\n      delay: options.delay,\n    }\n  )\n}\n","import { Contract } from '@near-js/accounts'\nimport { KeyPair } from '@near-js/crypto'\nimport { actionCreators } from '@near-js/transactions'\nimport { najToUncompressedPubKeySEC1 } from '@utils/cryptography'\nimport { getRootPublicKey } from '@utils/publicKey'\nimport BN from 'bn.js'\n\nimport { CHAINS, KDF_CHAIN_IDS } from '@constants'\nimport { ChainSignatureContract as AbstractChainSignatureContract } from '@contracts/ChainSignatureContract'\nimport type { SignArgs } from '@contracts/ChainSignatureContract'\nimport { getNearAccount } from '@contracts/near/account'\nimport { DONT_CARE_ACCOUNT_ID, NEAR_MAX_GAS } from '@contracts/near/constants'\nimport {\n  responseToMpcSignature,\n  type SendTransactionOptions,\n  sendTransactionUntil,\n} from '@contracts/near/transaction'\nimport {\n  type NearNetworkIds,\n  type ChainSignatureContractIds,\n} from '@contracts/near/types'\nimport type { RSVSignature, UncompressedPubKeySEC1, NajPublicKey } from '@types'\nimport { cryptography } from '@utils'\n\ntype NearContract = Contract & {\n  public_key: () => Promise<NajPublicKey>\n  experimental_signature_deposit: () => Promise<number>\n  derived_public_key: (args: {\n    path: string\n    predecessor: string\n    domain_id?: number\n  }) => Promise<NajPublicKey | `Ed25519:${string}`>\n}\n\ninterface ChainSignatureContractArgs {\n  networkId: NearNetworkIds\n  contractId: ChainSignatureContractIds\n  accountId?: string\n  keypair?: KeyPair\n  rootPublicKey?: NajPublicKey\n  sendTransactionOptions?: SendTransactionOptions\n}\n\n/**\n * Implementation of the ChainSignatureContract for NEAR chains.\n *\n * This class provides an interface to interact with the ChainSignatures contract\n * deployed on NEAR. It supports both view methods (which don't require authentication)\n * and change methods (which require a valid NEAR account and keypair).\n *\n * @extends AbstractChainSignatureContract\n */\nexport class ChainSignatureContract extends AbstractChainSignatureContract {\n  private readonly networkId: NearNetworkIds\n  private readonly contractId: ChainSignatureContractIds\n  private readonly accountId: string\n  private readonly keypair: KeyPair\n  private readonly rootPublicKey?: NajPublicKey\n  private readonly sendTransactionOptions?: SendTransactionOptions\n  /**\n   * Creates a new instance of the ChainSignatureContract for NEAR chains.\n   *\n   * @param args - Configuration options for the contract\n   * @param args.networkId - The NEAR network ID (e.g. 'testnet', 'mainnet')\n   * @param args.contractId - The contract ID of the deployed ChainSignatures contract\n   * @param args.accountId - Optional NEAR account ID for signing transactions. Required for change methods.\n   * @param args.keypair - Optional NEAR KeyPair for signing transactions. Required for change methods.\n   * @param args.rootPublicKey - Optional root public key for the contract. If not provided, it will be derived from the contract ID.\n   * @param args.sendTransactionOptions - Optional configuration for transaction sending behavior.\n   */\n  constructor({\n    networkId,\n    contractId,\n    accountId = DONT_CARE_ACCOUNT_ID,\n    keypair = KeyPair.fromRandom('ed25519'),\n    rootPublicKey,\n    sendTransactionOptions,\n  }: ChainSignatureContractArgs) {\n    super()\n\n    this.networkId = networkId\n    this.contractId = contractId\n    this.accountId = accountId\n    this.keypair = keypair\n    this.sendTransactionOptions = sendTransactionOptions\n\n    this.rootPublicKey =\n      rootPublicKey || getRootPublicKey(this.contractId, CHAINS.NEAR)\n  }\n\n  private async getContract(): Promise<NearContract> {\n    const account = await getNearAccount({\n      networkId: this.networkId,\n      accountId: this.accountId,\n      keypair: this.keypair,\n    })\n\n    return new Contract(account, this.contractId, {\n      viewMethods: [\n        'public_key',\n        'experimental_signature_deposit',\n        'derived_public_key',\n      ],\n      // Change methods use the sendTransactionUntil because the internal retry of the Contract class\n      // throws on NodeJs.\n      changeMethods: [],\n      useLocalViewExecution: false,\n    }) as unknown as NearContract\n  }\n\n  async getCurrentSignatureDeposit(): Promise<BN> {\n    const contract = await this.getContract()\n    return new BN(\n      (await contract.experimental_signature_deposit()).toLocaleString(\n        'fullwide',\n        {\n          useGrouping: false,\n        }\n      )\n    )\n  }\n\n  async getDerivedPublicKey(args: {\n    path: string\n    predecessor: string\n    IsEd25519?: boolean\n  }): Promise<UncompressedPubKeySEC1 | `Ed25519:${string}`> {\n    if (args.IsEd25519) {\n      const contract = await this.getContract()\n      return (await contract.derived_public_key({\n        path: args.path,\n        predecessor: args.predecessor,\n        domain_id: 1,\n      })) as `Ed25519:${string}`\n    }\n\n    if (this.rootPublicKey) {\n      const pubKey = cryptography.deriveChildPublicKey(\n        await this.getPublicKey(),\n        args.predecessor.toLowerCase(),\n        args.path,\n        KDF_CHAIN_IDS.NEAR\n      )\n      return pubKey\n    } else {\n      // Support for legacy contract\n      const contract = await this.getContract()\n      const najPubKey = await contract.derived_public_key(args)\n      return najToUncompressedPubKeySEC1(najPubKey as NajPublicKey)\n    }\n  }\n\n  async getPublicKey(): Promise<UncompressedPubKeySEC1> {\n    if (this.rootPublicKey) {\n      return najToUncompressedPubKeySEC1(this.rootPublicKey)\n    } else {\n      // Support for legacy contract\n      const contract = await this.getContract()\n      const najPubKey = await contract.public_key()\n      return najToUncompressedPubKeySEC1(najPubKey)\n    }\n  }\n\n  async sign(\n    args: SignArgs,\n    options?: {\n      nonce?: number\n    }\n  ): Promise<RSVSignature> {\n    this.requireAccount()\n\n    const deposit = await this.getCurrentSignatureDeposit()\n\n    const result = await sendTransactionUntil({\n      accountId: this.accountId,\n      keypair: this.keypair,\n      networkId: this.networkId,\n      receiverId: this.contractId,\n      actions: [\n        actionCreators.functionCall(\n          'sign',\n          { request: args },\n          BigInt(NEAR_MAX_GAS.toString()),\n          BigInt(deposit.toString())\n        ),\n      ],\n      nonce: options?.nonce,\n      options: this.sendTransactionOptions,\n    })\n\n    const signature = responseToMpcSignature({ response: result })\n\n    if (!signature) {\n      throw new Error('Transaction failed')\n    }\n\n    return signature\n  }\n\n  private requireAccount(): void {\n    if (this.accountId === DONT_CARE_ACCOUNT_ID) {\n      throw new Error(\n        'A valid account ID and keypair are required for change methods. Please instantiate a new contract with valid credentials.'\n      )\n    }\n  }\n}\n","import * as ChainSignaturesContractABI from './ChainSignaturesContractABI'\nimport * as errors from './errors'\nexport * from './ChainSignaturesContract'\n\nconst utils = {\n  ChainSignaturesContractABI,\n  errors,\n}\n\nexport { utils }\n","export const abi = [\n  {\n    inputs: [\n      { internalType: 'address', name: '_mpc_network', type: 'address' },\n      { internalType: 'uint256', name: '_signatureDeposit', type: 'uint256' },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  { inputs: [], name: 'AccessControlBadConfirmation', type: 'error' },\n  {\n    inputs: [\n      { internalType: 'address', name: 'account', type: 'address' },\n      { internalType: 'bytes32', name: 'neededRole', type: 'bytes32' },\n    ],\n    name: 'AccessControlUnauthorizedAccount',\n    type: 'error',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'bytes32', name: 'role', type: 'bytes32' },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'previousAdminRole',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'newAdminRole',\n        type: 'bytes32',\n      },\n    ],\n    name: 'RoleAdminChanged',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'bytes32', name: 'role', type: 'bytes32' },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n    ],\n    name: 'RoleGranted',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: 'bytes32', name: 'role', type: 'bytes32' },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n    ],\n    name: 'RoleRevoked',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'requestId',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'responder',\n        type: 'address',\n      },\n      { indexed: false, internalType: 'string', name: 'error', type: 'string' },\n    ],\n    name: 'SignatureError',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bytes32',\n        name: 'payload',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'uint32',\n        name: 'keyVersion',\n        type: 'uint32',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'deposit',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'chainId',\n        type: 'uint256',\n      },\n      { indexed: false, internalType: 'string', name: 'path', type: 'string' },\n      { indexed: false, internalType: 'string', name: 'algo', type: 'string' },\n      { indexed: false, internalType: 'string', name: 'dest', type: 'string' },\n      {\n        indexed: false,\n        internalType: 'string',\n        name: 'params',\n        type: 'string',\n      },\n    ],\n    name: 'SignatureRequested',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'requestId',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'responder',\n        type: 'address',\n      },\n      {\n        components: [\n          {\n            components: [\n              { internalType: 'uint256', name: 'x', type: 'uint256' },\n              { internalType: 'uint256', name: 'y', type: 'uint256' },\n            ],\n            internalType: 'struct ChainSignatures.AffinePoint',\n            name: 'bigR',\n            type: 'tuple',\n          },\n          { internalType: 'uint256', name: 's', type: 'uint256' },\n          { internalType: 'uint8', name: 'recoveryId', type: 'uint8' },\n        ],\n        indexed: false,\n        internalType: 'struct ChainSignatures.Signature',\n        name: 'signature',\n        type: 'tuple',\n      },\n    ],\n    name: 'SignatureResponded',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'Withdraw',\n    type: 'event',\n  },\n  {\n    inputs: [],\n    name: 'DEFAULT_ADMIN_ROLE',\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'bytes32', name: 'role', type: 'bytes32' }],\n    name: 'getRoleAdmin',\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'getSignatureDeposit',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'bytes32', name: 'role', type: 'bytes32' },\n      { internalType: 'address', name: 'account', type: 'address' },\n    ],\n    name: 'grantRole',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'bytes32', name: 'role', type: 'bytes32' },\n      { internalType: 'address', name: 'account', type: 'address' },\n    ],\n    name: 'hasRole',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'bytes32', name: 'role', type: 'bytes32' },\n      { internalType: 'address', name: 'callerConfirmation', type: 'address' },\n    ],\n    name: 'renounceRole',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: 'bytes32', name: 'requestId', type: 'bytes32' },\n          {\n            components: [\n              {\n                components: [\n                  { internalType: 'uint256', name: 'x', type: 'uint256' },\n                  { internalType: 'uint256', name: 'y', type: 'uint256' },\n                ],\n                internalType: 'struct ChainSignatures.AffinePoint',\n                name: 'bigR',\n                type: 'tuple',\n              },\n              { internalType: 'uint256', name: 's', type: 'uint256' },\n              { internalType: 'uint8', name: 'recoveryId', type: 'uint8' },\n            ],\n            internalType: 'struct ChainSignatures.Signature',\n            name: 'signature',\n            type: 'tuple',\n          },\n        ],\n        internalType: 'struct ChainSignatures.Response[]',\n        name: '_responses',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'respond',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: 'bytes32', name: 'requestId', type: 'bytes32' },\n          { internalType: 'string', name: 'errorMessage', type: 'string' },\n        ],\n        internalType: 'struct ChainSignatures.ErrorResponse[]',\n        name: '_errors',\n        type: 'tuple[]',\n      },\n    ],\n    name: 'respondError',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'bytes32', name: 'role', type: 'bytes32' },\n      { internalType: 'address', name: 'account', type: 'address' },\n    ],\n    name: 'revokeRole',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'uint256', name: '_amount', type: 'uint256' }],\n    name: 'setSignatureDeposit',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: 'bytes32', name: 'payload', type: 'bytes32' },\n          { internalType: 'string', name: 'path', type: 'string' },\n          { internalType: 'uint32', name: 'keyVersion', type: 'uint32' },\n          { internalType: 'string', name: 'algo', type: 'string' },\n          { internalType: 'string', name: 'dest', type: 'string' },\n          { internalType: 'string', name: 'params', type: 'string' },\n        ],\n        internalType: 'struct ChainSignatures.SignRequest',\n        name: '_request',\n        type: 'tuple',\n      },\n    ],\n    name: 'sign',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [{ internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' }],\n    name: 'supportsInterface',\n    outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      { internalType: 'uint256', name: '_amount', type: 'uint256' },\n      { internalType: 'address', name: '_receiver', type: 'address' },\n    ],\n    name: 'withdraw',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n]\n","import type { TransactionReceipt } from 'viem'\n\nexport class ChainSignatureError extends Error {\n  requestId: `0x${string}`\n  receipt: TransactionReceipt\n\n  constructor(\n    message: string,\n    requestId: `0x${string}`,\n    receipt: TransactionReceipt\n  ) {\n    super(message)\n    this.name = 'ChainSignatureError'\n    this.requestId = requestId\n    this.receipt = receipt\n  }\n}\n\nexport class SignatureNotFoundError extends ChainSignatureError {\n  constructor(requestId: `0x${string}`, receipt: TransactionReceipt) {\n    super('Signature not found after maximum retries', requestId, receipt)\n    this.name = 'SignatureNotFoundError'\n  }\n}\n\nexport class SignatureContractError extends ChainSignatureError {\n  errorCode: string\n\n  constructor(\n    errorCode: string,\n    requestId: `0x${string}`,\n    receipt: TransactionReceipt\n  ) {\n    super(`Signature error: ${errorCode}`, requestId, receipt)\n    this.name = 'SignatureContractError'\n    this.errorCode = errorCode\n  }\n}\n\nexport class SigningError extends ChainSignatureError {\n  originalError?: Error\n\n  constructor(\n    requestId: `0x${string}`,\n    receipt: TransactionReceipt,\n    originalError?: Error\n  ) {\n    super('Error signing request', requestId, receipt)\n    this.name = 'SigningError'\n    this.originalError = originalError\n  }\n}\n","import { encodeAbiParameters, keccak256 } from 'viem'\nimport * as chains from 'viem/chains'\nimport type { Chain } from 'viem/chains'\n\nimport { type RequestIdArgs } from './types'\n\nexport const getChain = (chainId: number): Chain => {\n  for (const chain of Object.values(chains)) {\n    if (chain.id === chainId) {\n      return chain\n    }\n  }\n  throw new Error('Chain not found')\n}\n\nexport const getRequestId = (request: RequestIdArgs): `0x${string}` => {\n  const encoded = encodeAbiParameters(\n    [\n      { type: 'address' },\n      { type: 'bytes' },\n      { type: 'string' },\n      { type: 'uint32' },\n      { type: 'uint256' },\n      { type: 'string' },\n      { type: 'string' },\n      { type: 'string' },\n    ],\n    [\n      request.address,\n      request.payload,\n      request.path,\n      Number(request.keyVersion),\n      request.chainId,\n      request.algo,\n      request.dest,\n      request.params,\n    ]\n  )\n\n  return keccak256(encoded)\n}\n","import { najToUncompressedPubKeySEC1 } from '@utils/cryptography'\nimport { getRootPublicKey } from '@utils/publicKey'\nimport BN from 'bn.js'\nimport { withRetry, type PublicClient, type WalletClient, type Hex } from 'viem'\n\nimport { CHAINS, KDF_CHAIN_IDS } from '@constants'\nimport { ChainSignatureContract as AbstractChainSignatureContract } from '@contracts/ChainSignatureContract'\nimport type { SignArgs } from '@contracts/ChainSignatureContract'\nimport type {\n  NajPublicKey,\n  RSVSignature,\n  ChainSigEvmMpcSignature,\n  UncompressedPubKeySEC1,\n} from '@types'\nimport { cryptography } from '@utils'\n\nimport { abi } from './ChainSignaturesContractABI'\nimport {\n  SignatureNotFoundError,\n  SignatureContractError,\n  SigningError,\n} from './errors'\nimport type {\n  RequestIdArgs,\n  SignOptions,\n  SignRequest,\n  SignatureErrorData,\n} from './types'\nimport { getRequestId } from './utils'\n\n/**\n * Implementation of the ChainSignatureContract for EVM chains.\n *\n * When signing data, the contract emits a SignatureRequested event with a requestId.\n * This requestId is used to track the signature request and retrieve the signature\n * once it's available. The sign method handles this process automatically by polling\n * for the signature using the requestId.\n */\nexport class ChainSignatureContract extends AbstractChainSignatureContract {\n  private readonly publicClient: PublicClient\n  private readonly walletClient: WalletClient\n  private readonly contractAddress: Hex\n  private readonly rootPublicKey: NajPublicKey\n\n  /**\n   * Creates a new instance of the ChainSignatureContract for EVM chains.\n   *\n   * @param args - Configuration options for the contract\n   * @param args.publicClient - A Viem PublicClient instance for reading from the blockchain\n   * @param args.walletClient - A Viem WalletClient instance for sending transactions\n   * @param args.contractAddress - The address of the deployed ChainSignatures contract (e.g. `0x857ED3A242B59cC24144814a0DF41C397a3811E6`)\n   * @param args.rootPublicKey - Optional root public key. If not provided, it will be derived from the contract address\n   */\n  constructor(args: {\n    publicClient: PublicClient\n    walletClient: WalletClient\n    contractAddress: Hex\n    rootPublicKey?: NajPublicKey\n  }) {\n    super()\n    this.publicClient = args.publicClient\n    this.walletClient = args.walletClient\n    this.contractAddress = args.contractAddress\n\n    const rootPublicKey =\n      args.rootPublicKey ||\n      getRootPublicKey(this.contractAddress, CHAINS.ETHEREUM)\n\n    if (!rootPublicKey) {\n      throw new Error(\n        `Invalid public key, please provide a valid root public key or contract address`\n      )\n    }\n\n    this.rootPublicKey = rootPublicKey\n  }\n\n  async getCurrentSignatureDeposit(): Promise<BN> {\n    const deposit = (await this.publicClient.readContract({\n      address: this.contractAddress,\n      abi,\n      functionName: 'getSignatureDeposit',\n    })) as bigint\n\n    return new BN(deposit.toString())\n  }\n\n  async getDerivedPublicKey(args: {\n    path: string\n    predecessor: string\n  }): Promise<UncompressedPubKeySEC1> {\n    if ('IsEd25519' in args && args.IsEd25519) {\n      throw new Error('Ed25519 not supported on EVM chains')\n    }\n    const pubKey = cryptography.deriveChildPublicKey(\n      await this.getPublicKey(),\n      args.predecessor.toLowerCase(),\n      args.path,\n      KDF_CHAIN_IDS.ETHEREUM\n    )\n\n    return pubKey\n  }\n\n  async getPublicKey(): Promise<UncompressedPubKeySEC1> {\n    return najToUncompressedPubKeySEC1(this.rootPublicKey)\n  }\n\n  async getLatestKeyVersion(): Promise<number> {\n    const version = (await this.publicClient.readContract({\n      address: this.contractAddress,\n      abi,\n      functionName: 'latestKeyVersion',\n    })) as bigint\n\n    return Number(version)\n  }\n\n  /**\n   * Sends a transaction to the contract to request a signature, then\n   * polls for the signature result. If the signature is not found within the retry\n   * parameters, it will throw an error.\n   */\n  async sign(\n    args: SignArgs,\n    options: SignOptions = {\n      sign: {\n        algo: '',\n        dest: '',\n        params: '',\n      },\n      retry: {\n        delay: 5000,\n        retryCount: 12,\n      },\n    }\n  ): Promise<RSVSignature> {\n    if (!this.walletClient?.account) {\n      throw new Error('Wallet client required for signing operations')\n    }\n\n    const request: SignRequest = {\n      payload: `0x${Buffer.from(args.payload).toString('hex')}`,\n      path: args.path,\n      keyVersion: args.key_version,\n      algo: options.sign.algo ?? '',\n      dest: options.sign.dest ?? '',\n      params: options.sign.params ?? '',\n    }\n\n    const requestId = this.getRequestId({\n      ...request,\n      address: this.walletClient.account.address,\n      chainId: this.publicClient.chain?.id\n        ? BigInt(this.publicClient.chain.id)\n        : 0n,\n    })\n\n    const hash = await this.walletClient.writeContract({\n      address: this.contractAddress,\n      abi,\n      chain: this.publicClient.chain,\n      account: this.walletClient.account,\n      functionName: 'sign',\n      args: [request],\n      value: BigInt((await this.getCurrentSignatureDeposit()).toString()),\n    })\n\n    const receipt = await this.publicClient.waitForTransactionReceipt({ hash })\n\n    try {\n      const result = await withRetry(\n        async () => {\n          const result = await this.getSignatureFromEvents(\n            requestId,\n            receipt.blockNumber\n          )\n\n          // TODO: Validate if this is the signature corresponding to the transaction as anybody can call respond on the contract\n\n          if (result) {\n            return result\n          } else {\n            throw new Error('Signature not found yet')\n          }\n        },\n        {\n          delay: options.retry.delay,\n          retryCount: options.retry.retryCount,\n          shouldRetry: ({ count, error }) => {\n            // TODO: Should be enabled only on debug mode\n            console.log(\n              `Retrying get signature: ${count}/${options.retry.retryCount}`\n            )\n            return error.message === 'Signature not found yet'\n          },\n        }\n      )\n\n      if (result) {\n        return result\n      } else {\n        const errorData = await this.getErrorFromEvents(\n          requestId,\n          receipt.blockNumber\n        )\n        if (errorData) {\n          throw new SignatureContractError(errorData.error, requestId, receipt)\n        } else {\n          throw new SignatureNotFoundError(requestId, receipt)\n        }\n      }\n    } catch (error) {\n      if (\n        error instanceof SignatureNotFoundError ||\n        error instanceof SignatureContractError\n      ) {\n        throw error\n      } else {\n        throw new SigningError(\n          requestId,\n          receipt,\n          error instanceof Error ? error : undefined\n        )\n      }\n    }\n  }\n\n  /**\n   * Generates the request ID for a signature request allowing to track the response.\n   *\n   * @param request - The signature request object containing:\n   *   @param request.address - The contract/wallet address calling the signing contract\n   *   @param request.payload - The data payload to be signed as a hex string\n   *   @param request.path - The derivation path for the key\n   *   @param request.keyVersion - The version of the key to use\n   *   @param request.chainId - The chain ID as a bigint\n   *   @param request.algo - The signing algorithm to use\n   *   @param request.dest - The destination for the signature\n   *   @param request.params - Additional parameters for the signing process\n   * @returns A hex string representing the unique request ID\n   *\n   * @example\n   * ```typescript\n   * const requestId = ChainSignatureContract.getRequestId({\n   *   address: walletClient.account.address,\n   *   payload: payload: `0x${Buffer.from(args.payload).toString('hex')}`,,\n   *   path: '',\n   *   keyVersion: 0,\n   *   chainId: 1n,\n   *   algo: '',\n   *   dest: '',\n   *   params: ''\n   * });\n   * console.log(requestId); // 0x...\n   * ```\n   */\n  getRequestId(request: RequestIdArgs): Hex {\n    return getRequestId(request)\n  }\n\n  async getErrorFromEvents(\n    requestId: Hex,\n    fromBlock: bigint\n  ): Promise<SignatureErrorData | undefined> {\n    const errorLogs = await this.publicClient.getContractEvents({\n      address: this.contractAddress,\n      abi,\n      eventName: 'SignatureError',\n      args: {\n        requestId,\n      },\n      fromBlock,\n      toBlock: 'latest',\n    })\n\n    if (errorLogs.length > 0) {\n      const { args: errorData } = errorLogs[\n        errorLogs.length - 1\n      ] as unknown as {\n        args: SignatureErrorData\n      }\n\n      return errorData\n    }\n\n    return undefined\n  }\n\n  /**\n   * Searches for SignatureResponded events that match the given requestId.\n   * It works in conjunction with the getRequestId method which generates the unique\n   * identifier for a signature request.\n   *\n   * @param requestId - The identifier for the signature request\n   * @param fromBlock - The block number to start searching from\n   * @returns The RSV signature if found, undefined otherwise\n   */\n  async getSignatureFromEvents(\n    requestId: Hex,\n    fromBlock: bigint\n  ): Promise<RSVSignature | undefined> {\n    const logs = await this.publicClient.getContractEvents({\n      address: this.contractAddress,\n      abi,\n      eventName: 'SignatureResponded',\n      args: {\n        requestId,\n      },\n      fromBlock,\n      toBlock: 'latest',\n    })\n\n    if (logs.length > 0) {\n      const { args: signatureData } = logs[logs.length - 1] as unknown as {\n        args: {\n          signature: ChainSigEvmMpcSignature\n        }\n      }\n\n      return cryptography.toRSV(signatureData.signature)\n    }\n\n    return undefined\n  }\n}\n"]}