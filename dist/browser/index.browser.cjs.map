{"version":3,"sources":["../../src/constants.ts","../../src/utils/index.ts","../../src/utils/cryptography.ts","../../src/chain-adapters/index.ts","../../src/chain-adapters/ChainAdapter.ts","../../src/chain-adapters/EVM/index.ts","../../src/chain-adapters/EVM/EVM.ts","../../src/chain-adapters/EVM/utils.ts","../../src/chain-adapters/Bitcoin/index.ts","../../src/chain-adapters/Bitcoin/utils.ts","../../src/chain-adapters/Bitcoin/Bitcoin.ts","../../src/chain-adapters/Bitcoin/BTCRpcAdapter/BTCRpcAdapter.ts","../../src/chain-adapters/Bitcoin/BTCRpcAdapter/Mempool/Mempool.ts","../../src/chain-adapters/Bitcoin/BTCRpcAdapter/index.ts","../../src/chain-adapters/Cosmos/index.ts","../../src/chain-adapters/Cosmos/Cosmos.ts","../../src/chain-adapters/Cosmos/utils.ts","../../src/chain-adapters/Solana/index.ts","../../src/chain-adapters/Solana/Solana.ts","../../src/mpc-contract/index.ts","../../src/mpc-contract/signAndSend/index.ts","../../src/mpc-contract/signAndSend/keypair.ts","../../src/mpc-contract/constants.ts","../../src/mpc-contract/account.ts","../../src/utils/publicKey.ts","../../src/mpc-contract/ChainSignatureContract.ts","../../src/mpc-contract/transaction.ts"],"names":["constants_exports","__export","CONTRACT_ADDRESSES","ENVS","ROOT_PUBLIC_KEYS","utils_exports","cryptography_exports","compressPubKey","deriveChildPublicKey","najToUncompressedPubKeySEC1","toRSV","signature","uncompressedPubKeySEC1","slicedPubKey","x","y","najPublicKey","decodedKey","base58","rootUncompressedPubKeySEC1","predecessorId","path","ec","EC","derivationPath","tweakBytes","sha3_256","tweak","BN","oldPublicKeyPoint","scalarTimesG","newPublicKeyPoint","newX","newY","chain_adapters_exports","ChainAdapter","Bitcoin_exports","Cosmos_exports","EVM_exports","Solana_exports","EVM","fetchEVMFeeProperties","client","transaction","gas","feeData","maxFeePerGas","maxPriorityFeePerGas","publicClient","contract","fees","nonce","from","rest","r","s","yParity","concatHex","numberToHex","predecessor","useRemoteDerivation","uncompressedPubKey","publicKeyNoPrefix","hash","keccak256","getAddress","address","serializeTransaction","serialized","parseTransaction","transactionRequest","serializedTx","txHash","toBytes","message","hashMessage","typedDataRequest","hashTypedData","userOp","entryPointAddress","chainIdArgs","chainId","entryPoint","encoded","encodeAbiParameters","hexToBigInt","concat","pad","isAddress","userOpHash","rsvSignatures","rsvSignature","txSerialized","error","BTCRpcAdapter","BTCRpcAdapters","Bitcoin","parseBTCNetwork","network","O","_Bitcoin","btcRpcAdapter","satoshis","btc","transactionId","data","tx","b","vout","scriptPubKey","rawSignature","inputs","outputs","psbt","input","prevOut","out","derivedKey","publicKeyBuffer","payment","transactionJSON","psbtHex","hashesToSign","mockKeyPair","index","publicKey","keyPair","mpcSignature","Mempool","providerUrl","confirmationTarget","targets","utxos","feeRate","ret","coinselect","transactionHex","response","txid","Cosmos","fetchChainInfo","chainInfo","chains","chain","prefix","expectedChainId","denom","rpcUrl","restUrl","gasPrice","asset","assets","decimals","unit","endpoints","Registry","fromHex","amount","pubKeySha256","sha256","ripemd160Hash","ripemd160","bech32","TxRaw","toBase64","fromBase64","publicKeyBytes","gasLimit","fee","calculateFee","GasPrice","accountOnChain","StargateClient","accountNumber","sequence","txBodyEncodeObject","txBodyBytes","pubkey","encodePubkey","encodeSecp256k1Pubkey","authInfoBytes","makeAuthInfoBytes","SignMode","signDoc","makeSignDoc","signBytes","makeSignBytes","payload","sig","txBytes","broadcastResponse","Solana","toBigInt","value","args","PublicKey","balance","base58Key","buffer","Transaction","request","SystemProgram","blockhash","messageBytes","senderAddress","signatureBuffer","mpc_contract_exports","ChainSignatureContract","utils","signAndSend_exports","keypair_exports","BTCTransaction","CosmosTransaction","EVMTransaction","NEAR_MAX_GAS","DONT_CARE_ACCOUNT_ID","getNearAccount","networkId","accountId","keypair","KeyPair","keyStore","InMemoryKeyStore","connection","Connection","Account","getRootPublicKey","contractAddress","environment","_","transaction_exports","mpcPayloadsToChainSigTransaction","responseToMpcSignature","sendTransactionUntil","contractId","currentContractFee","getTransactionLastResult","receiverId","actions","options","near","connect","signer","accessKey","recentBlockHash","nearUtils","transactions","nearTransactionSignature","signedTransaction","withRetry","txOutcome","rootPublicKey","sendTransactionOptions","account","Contract","najPubKey","deposit","result","actionCreators","req","evm","createPublicClient","http","signatures","cosmos"],"mappings":"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","file":"index.browser.cjs","sourcesContent":["import { type NajPublicKey } from '@types'\n\nexport const ENVS = {\n  TESTNET: 'TESTNET',\n  MAINNET: 'MAINNET',\n} as const\n\n/**\n * Root public keys for the Sig Network Smart Contracts across different environments.\n *\n * These keys should never change.\n */\nexport const ROOT_PUBLIC_KEYS: Record<keyof typeof ENVS, NajPublicKey> = {\n  [ENVS.TESTNET]:\n    'secp256k1:4NfTiv3UsGahebgTaHyD9vF8KYKMBnfd6kh94mK6xv8fGBiJB8TBtFMP5WWXz6B89Ac1fbpzPwAvoyQebemHFwx3',\n  [ENVS.MAINNET]:\n    'secp256k1:3tFRbMqmoa6AAALMrEFAYCEoHcqKxeW38YptwowBVBtXK1vo36HDbUWuR6EZmoK4JcH6HDkNMGGqP1ouV7VZUWya',\n}\n\n/**\n * Contract addresses for different chains and environments.\n *\n * - Testnet: Used for external development, stable\n * - Mainnet: Production contract address\n *\n * @see ChainSignatureContract documentation for implementation details\n */\nexport const CONTRACT_ADDRESSES: Record<keyof typeof ENVS, string> = {\n    [ENVS.TESTNET]: 'v1.signer-prod.testnet',\n    [ENVS.MAINNET]: 'v1.signer',\n}\n","export * as cryptography from './cryptography'\n","import { base58 } from '@scure/base'\nimport { ec as EC } from 'elliptic'\nimport { sha3_256 } from 'js-sha3'\n\nimport {\n  type NajPublicKey,\n  type MPCSignature,\n  type RSVSignature,\n  type UncompressedPubKeySEC1,\n} from '@types'\nimport BN from 'bn.js'\n\nexport const toRSV = (signature: MPCSignature): RSVSignature => {\n  // Handle NearNearMpcSignature\n  if (\n    'big_r' in signature &&\n    typeof signature.big_r === 'object' &&\n    'affine_point' in signature.big_r &&\n    's' in signature &&\n    typeof signature.s === 'object' &&\n    'scalar' in signature.s\n  ) {\n    return {\n      r: signature.big_r.affine_point.substring(2),\n      s: signature.s.scalar,\n      v: signature.recovery_id + 27,\n    }\n  }\n  // Handle ChainSigNearMpcSignature\n  else if (\n    'big_r' in signature &&\n    typeof signature.big_r === 'string' &&\n    's' in signature &&\n    typeof signature.s === 'string'\n  ) {\n    return {\n      r: signature.big_r.substring(2),\n      s: signature.s,\n      v: signature.recovery_id + 27,\n    }\n  }\n  // Handle ChainSigEvmMpcSignature\n  else if (\n    'bigR' in signature &&\n    'x' in signature.bigR &&\n    's' in signature &&\n    typeof signature.s === 'bigint'\n  ) {\n    return {\n      r: signature.bigR.x.toString(16).padStart(64, '0'),\n      s: signature.s.toString(16).padStart(64, '0'),\n      v: signature.recoveryId + 27,\n    }\n  }\n\n  throw new Error('Invalid signature format')\n}\n\n/**\n * Compresses an uncompressed public key to its compressed format following SEC1 standards.\n * In SEC1, a compressed public key consists of a prefix (02 or 03) followed by the x-coordinate.\n * The prefix indicates whether the y-coordinate is even (02) or odd (03).\n *\n * @param uncompressedPubKeySEC1 - The uncompressed public key in hex format, with or without '04' prefix\n * @returns The compressed public key in hex format\n * @throws Error if the uncompressed public key length is invalid\n */\nexport const compressPubKey = (\n  uncompressedPubKeySEC1: UncompressedPubKeySEC1\n): string => {\n  const slicedPubKey = uncompressedPubKeySEC1.slice(2)\n\n  if (slicedPubKey.length !== 128) {\n    throw new Error('Invalid uncompressed public key length')\n  }\n\n  const x = slicedPubKey.slice(0, 64)\n  const y = slicedPubKey.slice(64)\n\n  const isEven = parseInt(y.slice(-1), 16) % 2 === 0\n  const prefix = isEven ? '02' : '03'\n\n  return prefix + x\n}\n\n/**\n * Converts a NAJ public key to an uncompressed SEC1 public key.\n *\n * @param najPublicKey - The NAJ public key to convert (e.g. secp256k1:3Ww8iFjqTHufye5aRGUvrQqETegR4gVUcW8FX5xzscaN9ENhpkffojsxJwi6N1RbbHMTxYa9UyKeqK3fsMuwxjR5)\n * @returns The uncompressed SEC1 public key (e.g. 04 || x || y)\n */\nexport const najToUncompressedPubKeySEC1 = (\n  najPublicKey: NajPublicKey\n): UncompressedPubKeySEC1 => {\n  const decodedKey = base58.decode(najPublicKey.split(':')[1])\n  return `04${Buffer.from(decodedKey).toString('hex')}`\n}\n\n/**\n * Derives a child public key from a parent public key using the sig.network v1.0.0 epsilon derivation scheme.\n * The parent public keys are defined in @constants.ts\n *\n * @param najPublicKey - The parent public key in uncompressed SEC1 format (e.g. 04 || x || y)\n * @param predecessorId - The predecessor ID is the address of the account calling the signer contract (e.g EOA or Contract Address)\n * @param path - Optional derivation path suffix (defaults to empty string)\n * @returns The derived child public key in uncompressed SEC1 format (04 || x || y)\n */\nexport function deriveChildPublicKey(\n  rootUncompressedPubKeySEC1: UncompressedPubKeySEC1,\n  predecessorId: string,\n  path: string = '',\n): UncompressedPubKeySEC1 {\n  const ec = new EC('secp256k1')\n\n  const TWEAK_DERIVATION_PREFIX = 'near-mpc-recovery v0.1.0 epsilon derivation:'\n  const derivationPath = `${TWEAK_DERIVATION_PREFIX}${predecessorId},${path}`\n\n  // Generate tweak using SHA3-256\n  const tweakBytes = sha3_256(derivationPath)\n  const tweak = new BN(tweakBytes, 16)\n\n  // Parse the uncompressed public key\n  const x = rootUncompressedPubKeySEC1.substring(2, 66)\n  const y = rootUncompressedPubKeySEC1.substring(66)\n  const oldPublicKeyPoint = ec.curve.point(x, y)\n\n  // Calculate new point: P + [tweak]G\n  const scalarTimesG = ec.g.mul(tweak)\n  const newPublicKeyPoint = oldPublicKeyPoint.add(scalarTimesG)\n\n  // Format the result as uncompressed SEC1\n  const newX = newPublicKeyPoint.getX().toString('hex').padStart(64, '0')\n  const newY = newPublicKeyPoint.getY().toString('hex').padStart(64, '0')\n  return `04${newX}${newY}`\n}","export { ChainAdapter } from './ChainAdapter'\n\nexport * as evm from './EVM'\nexport * as btc from './Bitcoin'\nexport * as cosmos from './Cosmos'\nexport * as solana from './Solana'\n","import { type Transaction } from '@solana/web3.js'\n\nimport type { HashToSign, RSVSignature, Signature } from '@types'\n\nexport abstract class ChainAdapter<TransactionRequest, UnsignedTransaction> {\n  /**\n   * Gets the native token balance and decimals for a given address\n   *\n   * @param address - The address to check\n   * @returns Promise resolving to an object containing:\n   *          - balance: The balance as a bigint, in the chain's base units\n   *          - decimals: The number of decimals used to format the balance\n   */\n  abstract getBalance(address: string): Promise<{\n    balance: bigint\n    decimals: number\n  }>\n\n  /**\n   * Uses Sig Network Key Derivation Function to derive the address and public key. from a signer ID and string path.\n   *\n   * @param predecessor - The id/address of the account requesting signature\n   * @param path - The string path used to derive the key\n   * @returns Promise resolving to the derived address and public key\n   */\n  abstract deriveAddressAndPublicKey(\n    predecessor: string,\n    path: string,\n    useRemoteDerivation?: boolean\n  ): Promise<{\n    address: string\n    publicKey: string\n  }>\n\n  /**\n   * Serializes an unsigned transaction to a string format.\n   * This is useful for storing or transmitting the transaction.\n   *\n   * @param transaction - The unsigned transaction to serialize\n   * @returns The serialized transaction string\n   */\n  abstract serializeTransaction(transaction: UnsignedTransaction): string\n\n  /**\n   * Deserializes a transaction string back into an unsigned transaction object.\n   * This reverses the serialization done by serializeTransaction().\n   *\n   * @param serialized - The serialized transaction string\n   * @returns The deserialized unsigned transaction\n   */\n  abstract deserializeTransaction(serialized: string): UnsignedTransaction\n\n  /**\n   * Prepares a transaction for Sig Network MPC signing by creating the necessary payloads.\n   * This method handles chain-specific transaction preparation including:\n   * - Fee calculation\n   * - Nonce/sequence management\n   * - UTXO selection (for UTXO-based chains)\n   * - Transaction encoding\n   *\n   * @param transactionRequest - The transaction request containing parameters like recipient, amount, etc.\n   * @returns Promise resolving to an object containing:\n   *          - transaction: The unsigned transaction\n   *          - hashesToSign: Array of payloads to be signed by MPC. The order of these payloads must match\n   *                         the order of signatures provided to finalizeTransactionSigning()\n   */\n  abstract prepareTransactionForSigning(\n    transactionRequest: TransactionRequest\n  ): Promise<{\n    transaction: UnsignedTransaction\n    hashesToSign: HashToSign[]\n  }>\n\n  /**\n   * Adds Sig Network MPC-generated signatures to an unsigned transaction.\n   *\n   * @param params - Parameters for adding signatures\n   * @param params.transaction - The unsigned transaction to add signatures to\n   * @param params.rsvSignatures - Array of RSV signatures generated through MPC. Must be in the same order\n   *                              as the payloads returned by prepareTransactionForSigning()\n   * @returns The serialized signed transaction ready for broadcast\n   */\n  abstract finalizeTransactionSigning(params: {\n    transaction: UnsignedTransaction | Transaction\n    rsvSignatures: RSVSignature[] | Signature\n  }): string\n\n  /**\n   * Broadcasts a signed transaction to the network.\n   *\n   * @param txSerialized - The serialized signed transaction\n   * @returns Promise resolving to an object containing the transaction hash/ID\n   */\n  abstract broadcastTx(txSerialized: string): Promise<{ hash: string }>\n}\n","// EVM\nexport { EVM } from './EVM'\n\nexport { fetchEVMFeeProperties } from './utils'\n\nexport type {\n  EVMTransactionRequest,\n  EVMUnsignedTransaction,\n  EVMMessage,\n  EVMTypedData,\n} from './types'\n","import {\n  parseTransaction,\n  type PublicClient,\n  hashMessage,\n  hashTypedData,\n  keccak256,\n  toBytes,\n  type Hex,\n  serializeTransaction,\n  type Signature,\n  numberToHex,\n  getAddress,\n  type Address,\n  type Hash,\n  concatHex,\n  encodeAbiParameters,\n  hexToBigInt,\n  concat,\n  pad,\n  isAddress,\n} from 'viem'\n\nimport { ChainAdapter } from '@chain-adapters/ChainAdapter'\nimport type {\n  EVMTransactionRequest,\n  EVMUnsignedTransaction,\n  EVMMessage,\n  EVMTypedData,\n  UserOperationV6,\n  UserOperationV7,\n} from '@chain-adapters/EVM/types'\nimport { fetchEVMFeeProperties } from '@chain-adapters/EVM/utils'\nimport type { ChainSignatureContract } from '@mpc-contract/ChainSignatureContract'\nimport type { HashToSign, RSVSignature } from '@types'\n\n/**\n * Implementation of the ChainAdapter interface for EVM-compatible networks.\n * Handles interactions with Ethereum Virtual Machine based blockchains like Ethereum, BSC, Polygon, etc.\n */\nexport class EVM extends ChainAdapter<\n  EVMTransactionRequest,\n  EVMUnsignedTransaction\n> {\n  private readonly client: PublicClient\n  private readonly contract: ChainSignatureContract\n\n  /**\n   * Creates a new EVM chain instance\n   * @param params - Configuration parameters\n   * @param params.publicClient - A Viem PublicClient instance for reading from the blockchain\n   * @param params.contract - Instance of the chain signature contract for MPC operations\n   */\n  constructor({\n    publicClient,\n    contract,\n  }: {\n    publicClient: PublicClient\n    contract: ChainSignatureContract\n  }) {\n    super()\n\n    this.contract = contract\n    this.client = publicClient\n  }\n\n  private async attachGasAndNonce(\n    transaction: EVMTransactionRequest\n  ): Promise<EVMUnsignedTransaction> {\n    const fees = await fetchEVMFeeProperties(this.client, transaction)\n    const nonce = await this.client.getTransactionCount({\n      address: transaction.from,\n    })\n\n    const { from, ...rest } = transaction\n\n    return {\n      ...fees,\n      nonce,\n      chainId: Number(await this.client.getChainId()),\n      type: 'eip1559',\n      ...rest,\n    }\n  }\n\n  private transformRSVSignature(signature: RSVSignature): Signature {\n    return {\n      r: `0x${signature.r}`,\n      s: `0x${signature.s}`,\n      yParity: signature.v - 27,\n    }\n  }\n\n  private assembleSignature(signature: RSVSignature): Hex {\n    const { r, s, yParity } = this.transformRSVSignature(signature)\n\n    if (yParity === undefined) {\n      throw new Error('Missing yParity')\n    }\n\n    return concatHex([r, s, numberToHex(yParity + 27, { size: 1 })])\n  }\n\n  async deriveAddressAndPublicKey(\n    predecessor: string,\n    path: string,\n    useRemoteDerivation?: boolean\n  ): Promise<{\n    address: string\n    publicKey: string\n  }> {\n    const uncompressedPubKey = await this.contract.getDerivedPublicKey({\n      path,\n      predecessor,\n      useRemoteDerivation,\n    })\n\n    if (!uncompressedPubKey) {\n      throw new Error('Failed to get derived public key')\n    }\n\n    const publicKeyNoPrefix = uncompressedPubKey.startsWith('04')\n      ? uncompressedPubKey.slice(2)\n      : uncompressedPubKey\n\n    const hash = keccak256(Buffer.from(publicKeyNoPrefix, 'hex'))\n    const address = getAddress(`0x${hash.slice(-40)}`)\n\n    return {\n      address,\n      publicKey: uncompressedPubKey,\n    }\n  }\n\n  async getBalance(\n    address: string\n  ): Promise<{ balance: bigint; decimals: number }> {\n    const balance = await this.client.getBalance({\n      address: address as Address,\n    })\n    return {\n      balance,\n      decimals: 18,\n    }\n  }\n\n  serializeTransaction(transaction: EVMUnsignedTransaction): `0x${string}` {\n    return serializeTransaction(transaction)\n  }\n\n  deserializeTransaction(serialized: `0x${string}`): EVMUnsignedTransaction {\n    return parseTransaction(serialized) as EVMUnsignedTransaction\n  }\n\n  async prepareTransactionForSigning(\n    transactionRequest: EVMTransactionRequest\n  ): Promise<{\n    transaction: EVMUnsignedTransaction\n    hashesToSign: HashToSign[]\n  }> {\n    const transaction = await this.attachGasAndNonce(transactionRequest)\n\n    const serializedTx = serializeTransaction(transaction)\n    const txHash = toBytes(keccak256(serializedTx))\n\n    return {\n      transaction,\n      hashesToSign: [Array.from(txHash)],\n    }\n  }\n\n  async prepareMessageForSigning(message: EVMMessage): Promise<{\n    hashToSign: HashToSign\n  }> {\n    return {\n      hashToSign: Array.from(toBytes(hashMessage(message))),\n    }\n  }\n\n  async prepareTypedDataForSigning(typedDataRequest: EVMTypedData): Promise<{\n    hashToSign: HashToSign\n  }> {\n    return {\n      hashToSign: Array.from(toBytes(hashTypedData(typedDataRequest))),\n    }\n  }\n\n  /**\n   * This implementation is a common step for Biconomy and Alchemy.\n   * Key differences between implementations:\n   * - Signature format: Biconomy omits 0x00 prefix when concatenating, Alchemy includes it\n   * - Version support: Biconomy only supports v6, Alchemy supports both v6 and v7\n   * - Validation: Biconomy uses modules for signature validation, Alchemy uses built-in validation\n   */\n  async prepareUserOpForSigning(\n    userOp: UserOperationV7 | UserOperationV6,\n    entryPointAddress?: Address,\n    chainIdArgs?: number\n  ): Promise<{\n    userOp: UserOperationV7 | UserOperationV6\n    hashToSign: HashToSign\n  }> {\n    const chainId = chainIdArgs ?? (await this.client.getChainId())\n    const entryPoint =\n      entryPointAddress || '0x0000000071727De22E5E9d8BAf0edAc6f37da032'\n\n    const encoded = encodeAbiParameters(\n      [{ type: 'bytes32' }, { type: 'address' }, { type: 'uint256' }],\n      [\n        keccak256(\n          encodeAbiParameters(\n            [\n              { type: 'address' },\n              { type: 'uint256' },\n              { type: 'bytes32' },\n              { type: 'bytes32' },\n              { type: 'bytes32' },\n              { type: 'uint256' },\n              { type: 'bytes32' },\n              { type: 'bytes32' },\n            ],\n            [\n              userOp.sender,\n              hexToBigInt(userOp.nonce),\n              keccak256(\n                'factory' in userOp &&\n                  'factoryData' in userOp &&\n                  userOp.factory &&\n                  userOp.factoryData\n                  ? concat([userOp.factory, userOp.factoryData])\n                  : 'initCode' in userOp\n                    ? userOp.initCode\n                    : '0x'\n              ),\n              keccak256(userOp.callData),\n              concat([\n                pad(userOp.verificationGasLimit, { size: 16 }),\n                pad(userOp.callGasLimit, { size: 16 }),\n              ]),\n              hexToBigInt(userOp.preVerificationGas),\n              concat([\n                pad(userOp.maxPriorityFeePerGas, { size: 16 }),\n                pad(userOp.maxFeePerGas, { size: 16 }),\n              ]),\n              keccak256(\n                'paymaster' in userOp &&\n                  userOp.paymaster &&\n                  isAddress(userOp.paymaster)\n                  ? concat([\n                    userOp.paymaster,\n                    pad(userOp.paymasterVerificationGasLimit, { size: 16 }),\n                    pad(userOp.paymasterPostOpGasLimit, { size: 16 }),\n                    userOp.paymasterData,\n                  ])\n                  : 'paymasterAndData' in userOp\n                    ? userOp.paymasterAndData\n                    : '0x'\n              ),\n            ]\n          )\n        ),\n        entryPoint,\n        BigInt(chainId),\n      ]\n    )\n\n    const userOpHash = keccak256(encoded)\n\n    return {\n      userOp,\n      hashToSign: Array.from(toBytes(hashMessage({ raw: userOpHash }))),\n    }\n  }\n\n  finalizeTransactionSigning({\n    transaction,\n    rsvSignatures,\n  }: {\n    transaction: EVMUnsignedTransaction\n    rsvSignatures: RSVSignature[]\n  }): `0x02${string}` {\n    const signature = this.transformRSVSignature(rsvSignatures[0])\n\n    return serializeTransaction(transaction, signature)\n  }\n\n  finalizeMessageSigning({\n    rsvSignature,\n  }: {\n    rsvSignature: RSVSignature\n  }): Hex {\n    return this.assembleSignature(rsvSignature)\n  }\n\n  finalizeTypedDataSigning({\n    rsvSignature,\n  }: {\n    rsvSignature: RSVSignature\n  }): Hex {\n    return this.assembleSignature(rsvSignature)\n  }\n\n  finalizeUserOpSigning({\n    userOp,\n    rsvSignature,\n  }: {\n    userOp: UserOperationV7 | UserOperationV6\n    rsvSignature: RSVSignature\n  }): UserOperationV7 | UserOperationV6 {\n    const { r, s, yParity } = this.transformRSVSignature(rsvSignature)\n    if (yParity === undefined) {\n      throw new Error('Missing yParity')\n    }\n\n    return {\n      ...userOp,\n      signature: concatHex([\n        '0x00', // Alchemy specific implementation. Biconomy doesn't include the 0x00 prefix.\n        r,\n        s,\n        numberToHex(Number(yParity + 27), { size: 1 }),\n      ]),\n    }\n  }\n\n  async broadcastTx(txSerialized: string): Promise<{ hash: Hash }> {\n    try {\n      const hash = await this.client.sendRawTransaction({\n        serializedTransaction: txSerialized as `0x${string}`,\n      })\n      return { hash: hash }\n    } catch (error) {\n      console.error('Transaction broadcast failed:', error)\n      throw new Error('Failed to broadcast transaction.')\n    }\n  }\n}\n","import { type PublicClient, type TransactionRequest } from 'viem'\n\nexport interface EVMFeeProperties {\n  gas: bigint\n  maxFeePerGas: bigint\n  maxPriorityFeePerGas: bigint\n}\n\nexport async function fetchEVMFeeProperties(\n  client: PublicClient,\n  transaction: TransactionRequest\n): Promise<EVMFeeProperties> {\n  const [gas, feeData] = await Promise.all([\n    client.estimateGas(transaction),\n    client.estimateFeesPerGas(),\n  ])\n\n  const maxFeePerGas = feeData.maxFeePerGas ?? BigInt(10_000_000_000) // 10 gwei\n  const maxPriorityFeePerGas =\n    feeData.maxPriorityFeePerGas ?? BigInt(10_000_000_000) // 10 gwei\n\n  return {\n    gas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n  }\n}\n","// Bitcoin\nexport { Bitcoin } from './Bitcoin'\n\nexport { BTCRpcAdapters, BTCRpcAdapter } from './BTCRpcAdapter'\n\nexport type {\n  BTCTransactionRequest,\n  BTCUnsignedTransaction,\n  BTCTransaction,\n  BTCOutput,\n  BTCInput,\n  BTCNetworkId,\n} from './types'\n","import * as bitcoin from 'bitcoinjs-lib'\n\nexport function parseBTCNetwork(network: string): bitcoin.networks.Network {\n  switch (network.toLowerCase()) {\n    case 'mainnet':\n      return bitcoin.networks.bitcoin\n    case 'testnet':\n      return bitcoin.networks.testnet\n    case 'regtest':\n      return bitcoin.networks.regtest\n    default:\n      throw new Error(`Unknown Bitcoin network: ${network}`)\n  }\n}\n","import * as bitcoin from 'bitcoinjs-lib'\n\nimport { type BTCRpcAdapter } from '@chain-adapters/Bitcoin/BTCRpcAdapter'\nimport type {\n  BTCInput,\n  BTCNetworkId,\n  BTCOutput,\n  BTCTransactionRequest,\n  BTCUnsignedTransaction,\n} from '@chain-adapters/Bitcoin/types'\nimport { parseBTCNetwork } from '@chain-adapters/Bitcoin/utils'\nimport { ChainAdapter } from '@chain-adapters/ChainAdapter'\nimport type { ChainSignatureContract } from '@mpc-contract/ChainSignatureContract'\nimport type { HashToSign, RSVSignature, UncompressedPubKeySEC1 } from '@types'\nimport { cryptography } from '@utils'\n\n/**\n * Implementation of the ChainAdapter interface for Bitcoin network.\n * Handles interactions with both Bitcoin mainnet and testnet, supporting P2WPKH transactions.\n */\nexport class Bitcoin extends ChainAdapter<\n  BTCTransactionRequest,\n  BTCUnsignedTransaction\n> {\n  private static readonly SATOSHIS_PER_BTC = 100_000_000\n\n  private readonly network: BTCNetworkId\n  private readonly btcRpcAdapter: BTCRpcAdapter\n  private readonly contract: ChainSignatureContract\n\n  /**\n   * Creates a new Bitcoin chain instance\n   * @param params - Configuration parameters\n   * @param params.network - Network identifier (mainnet/testnet)\n   * @param params.contract - Instance of the chain signature contract for MPC operations\n   * @param params.btcRpcAdapter - Bitcoin RPC adapter for network interactions\n   */\n  constructor({\n    network,\n    contract,\n    btcRpcAdapter,\n  }: {\n    network: BTCNetworkId\n    contract: ChainSignatureContract\n    btcRpcAdapter: BTCRpcAdapter\n  }) {\n    super()\n\n    this.network = network\n    this.btcRpcAdapter = btcRpcAdapter\n    this.contract = contract\n  }\n\n  /**\n   * Converts satoshis to BTC\n   * @param satoshis - Amount in satoshis\n   * @returns Amount in BTC\n   */\n  static toBTC(satoshis: number): number {\n    return satoshis / Bitcoin.SATOSHIS_PER_BTC\n  }\n\n  /**\n   * Converts BTC to satoshis\n   * @param btc - Amount in BTC\n   * @returns Amount in satoshis (rounded)\n   */\n  static toSatoshi(btc: number): number {\n    return Math.round(btc * Bitcoin.SATOSHIS_PER_BTC)\n  }\n\n  private async fetchTransaction(\n    transactionId: string\n  ): Promise<bitcoin.Transaction> {\n    const data = await this.btcRpcAdapter.getTransaction(transactionId)\n    const tx = new bitcoin.Transaction()\n\n    data.vout.forEach((vout) => {\n      const scriptPubKey = Buffer.from(vout.scriptpubkey, 'hex')\n      tx.addOutput(scriptPubKey, Number(vout.value))\n    })\n\n    return tx\n  }\n\n  private static transformRSVSignature(signature: RSVSignature): Buffer {\n    const r = signature.r.padStart(64, '0')\n    const s = signature.s.padStart(64, '0')\n\n    const rawSignature = Buffer.from(r + s, 'hex')\n\n    if (rawSignature.length !== 64) {\n      throw new Error('Invalid signature length.')\n    }\n\n    return rawSignature\n  }\n\n  /**\n   * Creates a Partially Signed Bitcoin Transaction (PSBT)\n   * @param params - Parameters for creating the PSBT\n   * @param params.transactionRequest - Transaction request containing inputs and outputs\n   * @returns Created PSBT instance\n   */\n  async createPSBT({\n    transactionRequest,\n  }: {\n    transactionRequest: BTCTransactionRequest\n  }): Promise<bitcoin.Psbt> {\n    const { inputs, outputs } =\n      transactionRequest.inputs && transactionRequest.outputs\n        ? transactionRequest\n        : await this.btcRpcAdapter.selectUTXOs(transactionRequest.from, [\n            {\n              address: transactionRequest.to,\n              value: parseFloat(transactionRequest.value),\n            },\n          ])\n\n    const psbt = new bitcoin.Psbt({ network: parseBTCNetwork(this.network) })\n\n    await Promise.all(\n      inputs.map(async (input: BTCInput) => {\n        if (!input.scriptPubKey) {\n          const transaction = await this.fetchTransaction(input.txid)\n          const prevOut = transaction.outs[input.vout]\n          input.scriptPubKey = prevOut.script\n        }\n\n        // Prepare the input as P2WPKH\n        psbt.addInput({\n          hash: input.txid,\n          index: input.vout,\n          witnessUtxo: {\n            script: input.scriptPubKey,\n            value: input.value,\n          },\n        })\n      })\n    )\n\n    outputs.forEach((out: BTCOutput) => {\n      if ('address' in out) {\n        psbt.addOutput({\n          address: out.address,\n          value: out.value,\n        })\n      } else if ('script' in out) {\n        psbt.addOutput({\n          script: out.script,\n          value: out.value,\n        })\n      } else if (transactionRequest.from !== undefined) {\n        // Include change address from coinselect\n        psbt.addOutput({\n          value: Number(out.value),\n          address: transactionRequest.from,\n        })\n      }\n    })\n\n    return psbt\n  }\n\n  async getBalance(\n    address: string\n  ): Promise<{ balance: bigint; decimals: number }> {\n    const balance = BigInt(await this.btcRpcAdapter.getBalance(address))\n    return {\n      balance,\n      decimals: 8,\n    }\n  }\n\n  async deriveAddressAndPublicKey(\n    predecessor: string,\n    path: string,\n    useRemoteDerivation?: boolean\n  ): Promise<{ address: string; publicKey: string }> {\n    const uncompressedPubKey = await this.contract.getDerivedPublicKey({\n      path,\n      predecessor,\n      useRemoteDerivation,\n    })\n\n    if (!uncompressedPubKey) {\n      throw new Error('Failed to get derived public key')\n    }\n\n    const derivedKey = cryptography.compressPubKey(\n      uncompressedPubKey as UncompressedPubKeySEC1\n    )\n    const publicKeyBuffer = Buffer.from(derivedKey, 'hex')\n    const network = parseBTCNetwork(this.network)\n\n    const payment = bitcoin.payments.p2wpkh({\n      pubkey: publicKeyBuffer,\n      network,\n    })\n\n    const { address } = payment\n\n    if (!address) {\n      throw new Error('Failed to generate Bitcoin address')\n    }\n\n    return { address, publicKey: derivedKey }\n  }\n\n  serializeTransaction(transaction: BTCUnsignedTransaction): string {\n    return JSON.stringify({\n      psbt: transaction.psbt.toHex(),\n      publicKey: transaction.publicKey,\n    })\n  }\n\n  deserializeTransaction(serialized: string): BTCUnsignedTransaction {\n    const transactionJSON = JSON.parse(serialized)\n    return {\n      psbt: bitcoin.Psbt.fromHex(transactionJSON.psbt as string),\n      publicKey: transactionJSON.publicKey,\n    }\n  }\n\n  async prepareTransactionForSigning(\n    transactionRequest: BTCTransactionRequest\n  ): Promise<{\n    transaction: BTCUnsignedTransaction\n    hashesToSign: HashToSign[]\n  }> {\n    const publicKeyBuffer = Buffer.from(transactionRequest.publicKey, 'hex')\n    const psbt = await this.createPSBT({\n      transactionRequest,\n    })\n\n    // We can't double sign a PSBT, therefore we serialize the payload before to return it\n    const psbtHex = psbt.toHex()\n\n    const hashesToSign: HashToSign[] = []\n\n    const mockKeyPair = (index: number): bitcoin.Signer => ({\n      publicKey: publicKeyBuffer,\n      sign: (hash: Buffer): Buffer => {\n        hashesToSign[index] = Array.from(hash)\n        // Return dummy signature to satisfy the interface\n        return Buffer.alloc(64)\n      },\n    })\n\n    for (let index = 0; index < psbt.inputCount; index++) {\n      psbt.signInput(index, mockKeyPair(index))\n    }\n\n    return {\n      transaction: {\n        psbt: bitcoin.Psbt.fromHex(psbtHex),\n        publicKey: transactionRequest.publicKey,\n      },\n      hashesToSign,\n    }\n  }\n\n  finalizeTransactionSigning({\n    transaction: { psbt, publicKey },\n    rsvSignatures,\n  }: {\n    transaction: BTCUnsignedTransaction\n    rsvSignatures: RSVSignature[]\n  }): string {\n    const publicKeyBuffer = Buffer.from(publicKey, 'hex')\n\n    const keyPair = (index: number): bitcoin.Signer => ({\n      publicKey: publicKeyBuffer,\n      sign: () => {\n        const mpcSignature = rsvSignatures[index]\n        return Bitcoin.transformRSVSignature(mpcSignature)\n      },\n    })\n\n    for (let index = 0; index < psbt.inputCount; index++) {\n      psbt.signInput(index, keyPair(index))\n    }\n\n    psbt.finalizeAllInputs()\n    return psbt.extractTransaction().toHex()\n  }\n\n  async broadcastTx(txSerialized: string): Promise<{ hash: string }> {\n    const txId = await this.btcRpcAdapter.broadcastTransaction(txSerialized)\n    return { hash: txId }\n  }\n}\n","import type {\n  BTCTransaction,\n  BTCInput,\n  BTCOutput,\n} from '@chain-adapters/Bitcoin/types'\n\nexport abstract class BTCRpcAdapter {\n  abstract selectUTXOs(\n    from: string,\n    targets: BTCOutput[]\n  ): Promise<{ inputs: BTCInput[]; outputs: BTCOutput[] }>\n  abstract broadcastTransaction(transactionHex: string): Promise<string>\n  abstract getBalance(address: string): Promise<number>\n  abstract getTransaction(txid: string): Promise<BTCTransaction>\n}\n","// There is no types for coinselect\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-expect-error\n\nimport coinselect from 'coinselect'\n\nimport { BTCRpcAdapter } from '@chain-adapters/Bitcoin/BTCRpcAdapter/BTCRpcAdapter'\nimport {\n  type BTCFeeRecommendation,\n  type UTXO,\n} from '@chain-adapters/Bitcoin/BTCRpcAdapter/Mempool/types'\nimport type {\n  BTCTransaction,\n  BTCInput,\n  BTCOutput,\n} from '@chain-adapters/Bitcoin/types'\n\nexport class Mempool extends BTCRpcAdapter {\n  private readonly providerUrl: string\n\n  constructor(providerUrl: string) {\n    super()\n    this.providerUrl = providerUrl\n  }\n\n  private async fetchFeeRate(confirmationTarget = 6): Promise<number> {\n    const response = await fetch(`${this.providerUrl}/v1/fees/recommended`)\n    const data = (await response.json()) as BTCFeeRecommendation\n\n    if (confirmationTarget <= 1) {\n      return data.fastestFee\n    } else if (confirmationTarget <= 3) {\n      return data.halfHourFee\n    } else if (confirmationTarget <= 6) {\n      return data.hourFee\n    } else {\n      return data.economyFee\n    }\n  }\n\n  private async fetchUTXOs(address: string): Promise<UTXO[]> {\n    try {\n      const response = await fetch(\n        `${this.providerUrl}/address/${address}/utxo`\n      )\n      return (await response.json()) as UTXO[]\n    } catch (error) {\n      console.error('Failed to fetch UTXOs:', error)\n      return []\n    }\n  }\n\n  async selectUTXOs(\n    from: string,\n    targets: BTCOutput[],\n    confirmationTarget = 6\n  ): Promise<{ inputs: BTCInput[]; outputs: BTCOutput[] }> {\n    const utxos = await this.fetchUTXOs(from)\n    const feeRate = await this.fetchFeeRate(confirmationTarget)\n\n    // Add a small amount to the fee rate to ensure the transaction is confirmed\n    const ret = coinselect(utxos, targets, Math.ceil(feeRate + 1))\n\n    if (!ret.inputs || !ret.outputs) {\n      throw new Error(\n        'Invalid transaction: coinselect failed to find a suitable set of inputs and outputs. This could be due to insufficient funds, or no inputs being available that meet the criteria.'\n      )\n    }\n\n    return {\n      inputs: ret.inputs,\n      outputs: ret.outputs,\n    }\n  }\n\n  async broadcastTransaction(transactionHex: string): Promise<string> {\n    const response = await fetch(`${this.providerUrl}/tx`, {\n      method: 'POST',\n      body: transactionHex,\n    })\n\n    if (response.ok) {\n      return await response.text()\n    }\n\n    throw new Error(`Failed to broadcast transaction: ${await response.text()}`)\n  }\n\n  async getBalance(address: string): Promise<number> {\n    const response = await fetch(`${this.providerUrl}/address/${address}`)\n    const data = (await response.json()) as {\n      chain_stats: { funded_txo_sum: number; spent_txo_sum: number }\n    }\n    return data.chain_stats.funded_txo_sum - data.chain_stats.spent_txo_sum\n  }\n\n  async getTransaction(txid: string): Promise<BTCTransaction> {\n    const response = await fetch(`${this.providerUrl}/tx/${txid}`)\n    return (await response.json()) as BTCTransaction\n  }\n}\n","import { Mempool } from './Mempool'\nexport { BTCRpcAdapter } from './BTCRpcAdapter'\n\nexport const BTCRpcAdapters = {\n  Mempool,\n}\n","// Cosmos\nexport { Cosmos } from './Cosmos'\n\nexport type {\n  CosmosNetworkId,\n  CosmosTransactionRequest,\n  CosmosUnsignedTransaction,\n} from './types'\n","import { encodeSecp256k1Pubkey } from '@cosmjs/amino'\nimport { ripemd160, sha256 } from '@cosmjs/crypto'\nimport { toBase64, fromBase64, fromHex } from '@cosmjs/encoding'\nimport {\n  Registry,\n  makeSignBytes,\n  encodePubkey,\n  makeAuthInfoBytes,\n  makeSignDoc,\n  type TxBodyEncodeObject,\n} from '@cosmjs/proto-signing'\nimport { GasPrice, StargateClient, calculateFee } from '@cosmjs/stargate'\nimport { bech32 } from 'bech32'\nimport { SignMode } from 'cosmjs-types/cosmos/tx/signing/v1beta1/signing'\nimport { TxRaw } from 'cosmjs-types/cosmos/tx/v1beta1/tx'\n\nimport { ChainAdapter } from '@chain-adapters/ChainAdapter'\nimport type {\n  CosmosNetworkId,\n  CosmosTransactionRequest,\n  CosmosUnsignedTransaction,\n  ChainInfo,\n  BalanceResponse,\n} from '@chain-adapters/Cosmos/types'\nimport { fetchChainInfo } from '@chain-adapters/Cosmos/utils'\nimport type { ChainSignatureContract } from '@mpc-contract/ChainSignatureContract'\nimport type { HashToSign, RSVSignature, UncompressedPubKeySEC1 } from '@types'\nimport { cryptography } from '@utils'\n\n/**\n * Implementation of the ChainAdapter interface for Cosmos-based networks.\n * Handles interactions with Cosmos SDK chains like Cosmos Hub, Osmosis, etc.\n */\nexport class Cosmos extends ChainAdapter<\n  CosmosTransactionRequest,\n  CosmosUnsignedTransaction\n> {\n  private readonly registry: Registry\n  private readonly chainId: CosmosNetworkId\n  private readonly contract: ChainSignatureContract\n  private readonly endpoints?: {\n    rpcUrl?: string\n    restUrl?: string\n  }\n\n  /**\n   * Creates a new Cosmos chain instance\n   * @param params - Configuration parameters\n   * @param params.chainId - Chain id for the Cosmos network\n   * @param params.contract - Instance of the chain signature contract for MPC operations\n   * @param params.endpoints - Optional RPC and REST endpoints\n   * @param params.endpoints.rpcUrl - Optional RPC endpoint URL\n   * @param params.endpoints.restUrl - Optional REST endpoint URL\n   */\n  constructor({\n    chainId,\n    contract,\n    endpoints,\n  }: {\n    contract: ChainSignatureContract\n    chainId: CosmosNetworkId\n    endpoints?: {\n      rpcUrl?: string\n      restUrl?: string\n    }\n  }) {\n    super()\n\n    this.contract = contract\n    this.registry = new Registry()\n    this.chainId = chainId\n    this.endpoints = endpoints\n  }\n\n  private transformRSVSignature(rsvSignature: RSVSignature): Uint8Array {\n    return new Uint8Array([\n      ...fromHex(rsvSignature.r),\n      ...fromHex(rsvSignature.s),\n    ])\n  }\n\n  private async getChainInfo(): Promise<ChainInfo> {\n    return {\n      ...(await fetchChainInfo(this.chainId)),\n      ...this.endpoints,\n    }\n  }\n\n  async getBalance(\n    address: string\n  ): Promise<{ balance: bigint; decimals: number }> {\n    try {\n      const { restUrl, denom, decimals } = await this.getChainInfo()\n\n      const response = await fetch(\n        `${restUrl}/cosmos/bank/v1beta1/balances/${address}`\n      )\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const data = (await response.json()) as BalanceResponse\n      const balance = data.balances.find((b) => b.denom === denom)\n      const amount = balance?.amount ?? '0'\n\n      return {\n        balance: BigInt(amount),\n        decimals,\n      }\n    } catch (error) {\n      console.error('Failed to fetch Cosmos balance:', error)\n      throw new Error('Failed to fetch Cosmos balance')\n    }\n  }\n\n  async deriveAddressAndPublicKey(\n    predecessor: string,\n    path: string,\n    useRemoteDerivation?: boolean\n  ): Promise<{\n    address: string\n    publicKey: string\n  }> {\n    const { prefix } = await this.getChainInfo()\n    const uncompressedPubKey = await this.contract.getDerivedPublicKey({\n      path,\n      predecessor,\n      useRemoteDerivation,\n    })\n\n    if (!uncompressedPubKey) {\n      throw new Error('Failed to get derived public key')\n    }\n\n    const derivedKey = cryptography.compressPubKey(\n      uncompressedPubKey as UncompressedPubKeySEC1\n    )\n    const pubKeySha256 = sha256(fromHex(derivedKey))\n    const ripemd160Hash = ripemd160(pubKeySha256)\n    const address = bech32.encode(prefix, bech32.toWords(ripemd160Hash))\n\n    return { address, publicKey: derivedKey }\n  }\n\n  serializeTransaction(transaction: CosmosUnsignedTransaction): string {\n    const serialized = TxRaw.encode(transaction).finish()\n    return toBase64(serialized)\n  }\n\n  deserializeTransaction(serialized: string): CosmosUnsignedTransaction {\n    return TxRaw.decode(fromBase64(serialized))\n  }\n\n  async prepareTransactionForSigning(\n    transactionRequest: CosmosTransactionRequest\n  ): Promise<{\n    transaction: CosmosUnsignedTransaction\n    hashesToSign: HashToSign[]\n  }> {\n    const { denom, rpcUrl, gasPrice } = await this.getChainInfo()\n    const publicKeyBytes = fromHex(transactionRequest.publicKey)\n\n    const gasLimit = transactionRequest.gas || 200_000\n\n    const fee = calculateFee(\n      gasLimit,\n      GasPrice.fromString(`${gasPrice}${denom}`)\n    )\n\n    const client = await StargateClient.connect(rpcUrl)\n    const accountOnChain = await client.getAccount(transactionRequest.address)\n    if (!accountOnChain) {\n      throw new Error(\n        `Account ${transactionRequest.address} does not exist on chain`\n      )\n    }\n\n    const { accountNumber, sequence } = accountOnChain\n\n    const txBodyEncodeObject: TxBodyEncodeObject = {\n      typeUrl: '/cosmos.tx.v1beta1.TxBody',\n      value: {\n        messages: transactionRequest.messages,\n        memo: transactionRequest.memo || '',\n      },\n    }\n\n    const txBodyBytes = this.registry.encode(txBodyEncodeObject)\n\n    const pubkey = encodePubkey(encodeSecp256k1Pubkey(publicKeyBytes))\n\n    // TODO: Allow caller to provide: multiple signers, fee payer, fee granter\n    const authInfoBytes = makeAuthInfoBytes(\n      [\n        {\n          pubkey,\n          sequence,\n        },\n      ],\n      fee.amount,\n      Number(fee.gas),\n      undefined,\n      undefined,\n      SignMode.SIGN_MODE_DIRECT\n    )\n\n    const signDoc = makeSignDoc(\n      txBodyBytes,\n      authInfoBytes,\n      this.chainId,\n      accountNumber\n    )\n\n    const signBytes = makeSignBytes(signDoc)\n    const payload = Array.from(sha256(signBytes))\n\n    return {\n      transaction: TxRaw.fromPartial({\n        bodyBytes: txBodyBytes,\n        authInfoBytes,\n        signatures: [],\n      }),\n      hashesToSign: [payload],\n    }\n  }\n\n  finalizeTransactionSigning({\n    transaction,\n    rsvSignatures,\n  }: {\n    transaction: CosmosUnsignedTransaction\n    rsvSignatures: RSVSignature[]\n  }): string {\n    // Allow support for multi-sig but the package only supports single-sig\n    transaction.signatures = rsvSignatures.map((sig) =>\n      this.transformRSVSignature(sig)\n    )\n\n    const txBytes = TxRaw.encode(transaction).finish()\n    return Buffer.from(txBytes).toString('hex')\n  }\n\n  // @ts-expect-error - TODO: fix this\n  async broadcastTx(txSerialized: string): Promise<string> {\n    try {\n      const { rpcUrl } = await this.getChainInfo()\n      const client = await StargateClient.connect(rpcUrl)\n\n      const txBytes = fromHex(txSerialized)\n      const broadcastResponse = await client.broadcastTx(txBytes)\n\n      if (broadcastResponse.code !== 0) {\n        throw new Error(`Broadcast error: ${broadcastResponse.rawLog}`)\n      }\n\n      return broadcastResponse.transactionHash\n    } catch (error) {\n      console.error('Transaction broadcast failed:', error)\n      throw new Error('Failed to broadcast transaction.')\n    }\n  }\n}\n","import { chains, assets } from 'chain-registry'\n\nimport { type ChainInfo } from '@chain-adapters/Cosmos/types'\n\nexport const fetchChainInfo = async (chainId: string): Promise<ChainInfo> => {\n  const chainInfo = chains.find((chain) => chain.chain_id === chainId)\n  if (!chainInfo) {\n    throw new Error(`Chain info not found for chainId: ${chainId}`)\n  }\n\n  const { bech32_prefix: prefix, chain_id: expectedChainId } = chainInfo\n  const denom = chainInfo.staking?.staking_tokens?.[0]?.denom\n  const rpcUrl = chainInfo.apis?.rpc?.[0]?.address\n  const restUrl = chainInfo.apis?.rest?.[0]?.address\n  const gasPrice = chainInfo.fees?.fee_tokens?.[0]?.average_gas_price\n\n  if (\n    !prefix ||\n    !denom ||\n    !rpcUrl ||\n    !restUrl ||\n    !expectedChainId ||\n    gasPrice === undefined\n  ) {\n    throw new Error(\n      `Missing required chain information for ${chainInfo.chain_name}`\n    )\n  }\n\n  const assetList = assets.find(\n    (asset) => asset.chain_name === chainInfo.chain_name\n  )\n  const asset = assetList?.assets.find((asset) => asset.base === denom)\n  const decimals = asset?.denom_units.find(\n    (unit) => unit.denom === asset.display\n  )?.exponent\n\n  if (decimals === undefined) {\n    throw new Error(\n      `Could not find decimals for ${denom} on chain ${chainInfo.chain_name}`\n    )\n  }\n\n  return { prefix, denom, rpcUrl, restUrl, expectedChainId, gasPrice, decimals }\n}\n","export * from './Solana'\nexport * from './types'\n","import type { Connection as SolanaConnection } from '@solana/web3.js'\nimport { PublicKey, Transaction, SystemProgram } from '@solana/web3.js'\nimport type BN from 'bn.js'\n\nimport type { ChainSignatureContract } from '@mpc-contract/ChainSignatureContract'\nimport type { HashToSign, Signature } from '@types'\n\nimport { ChainAdapter } from '../ChainAdapter'\n\nimport type {\n  SolanaTransactionRequest,\n  SolanaUnsignedTransaction,\n} from './types'\n\nconst toBigInt = (value: bigint | BN): bigint => {\n  if (typeof value === 'bigint') return value\n  return BigInt(value.toString())\n}\n\nexport class Solana extends ChainAdapter<\n  SolanaTransactionRequest,\n  SolanaUnsignedTransaction\n> {\n  private readonly connection: SolanaConnection\n  private readonly contract: ChainSignatureContract\n\n  constructor(args: {\n    solanaConnection: SolanaConnection\n    contract: ChainSignatureContract\n  }) {\n    super()\n    this.connection = args.solanaConnection\n    this.contract = args.contract\n  }\n\n  async getBalance(\n    address: string\n  ): Promise<{ balance: bigint; decimals: number }> {\n    const pubkey = new PublicKey(address)\n    const balance = await this.connection.getBalance(pubkey)\n    return {\n      balance: BigInt(balance),\n      decimals: 9, // Solana uses 9 decimals (LAMPORTS_PER_SOL)\n    }\n  }\n\n  async deriveAddressAndPublicKey(\n    predecessor: string,\n    path: string,\n    useRemoteDerivation?: boolean\n  ): Promise<{ address: string; publicKey: string }> {\n    const pubKey = await this.contract.getDerivedPublicKey({\n      path,\n      predecessor,\n      IsEd25519: true,\n      useRemoteDerivation,\n    })\n\n    const base58Key = pubKey.replace('ed25519:', '')\n    const publicKey = new PublicKey(base58Key)\n\n    return {\n      address: publicKey.toBase58(),\n      publicKey: publicKey.toString(),\n    }\n  }\n\n  serializeTransaction(transaction: SolanaUnsignedTransaction): string {\n    return Buffer.from(\n      transaction.transaction.serialize({\n        requireAllSignatures: false,\n      })\n    ).toString('base64')\n  }\n\n  deserializeTransaction(serialized: string): SolanaUnsignedTransaction {\n    const buffer = Buffer.from(serialized, 'base64')\n    const transaction = Transaction.from(buffer)\n\n    return {\n      transaction,\n      feePayer:\n        transaction.feePayer ||\n        new PublicKey('11111111111111111111111111111111'),\n      recentBlockhash: transaction.recentBlockhash || '',\n    }\n  }\n\n  async prepareTransactionForSigning(\n    request: SolanaTransactionRequest\n  ): Promise<{\n    transaction: SolanaUnsignedTransaction\n    hashesToSign: HashToSign[]\n  }> {\n    const transaction = new Transaction()\n\n    // Add transfer instruction if amount is specified\n    const amount = toBigInt(request.amount)\n    if (amount > 0n) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: new PublicKey(request.from),\n          toPubkey: new PublicKey(request.to),\n          lamports: Number(amount),\n        })\n      )\n    }\n\n    // Add any additional instructions\n    if (request.instructions) {\n      transaction.add(...request.instructions)\n    }\n\n    // Get recent blockhash\n    const { blockhash } = await this.connection.getLatestBlockhash()\n    transaction.recentBlockhash = blockhash\n\n    // Set fee payer\n    transaction.feePayer = request.feePayer || new PublicKey(request.from)\n\n    const messageBytes = transaction.compileMessage().serialize()\n\n    return {\n      transaction: {\n        transaction,\n        feePayer: transaction.feePayer,\n        recentBlockhash: blockhash,\n      },\n      hashesToSign: [Array.from(messageBytes)],\n    }\n  }\n\n  finalizeTransactionSigning({\n    transaction,\n    rsvSignatures,\n    senderAddress,\n  }: {\n    transaction: Transaction\n    rsvSignatures: Signature\n    senderAddress: string\n  }): string {\n    const signatureBuffer = Buffer.from(rsvSignatures.signature)\n    transaction.addSignature(new PublicKey(senderAddress), signatureBuffer)\n    return transaction.serialize().toString('base64')\n  }\n\n  async broadcastTx(txSerialized: string): Promise<{ hash: string }> {\n    const transaction = this.deserializeTransaction(txSerialized)\n\n    const signature = await this.connection.sendRawTransaction(\n      transaction.transaction.serialize()\n    )\n\n    return { hash: signature }\n  }\n}\n","import * as signAndSend from './signAndSend'\nimport * as transaction from './transaction'\nexport * from './ChainSignatureContract'\nexport { ChainSignatureContract, type SignArgs } from './ChainSignatureContract'\n\nconst utils = {\n  transaction,\n  signAndSend,\n}\n\nexport { utils }\n","export * as keypair from './keypair'\n","import { type KeyPair } from '@near-js/crypto'\n\nimport * as chainAdapters from '@chain-adapters'\nimport { BTCRpcAdapters } from '@chain-adapters/Bitcoin/BTCRpcAdapter'\nimport { getNearAccount } from '../account'\nimport { ChainSignatureContract } from '../ChainSignatureContract'\nimport {\n  type Response,\n  type BitcoinRequest,\n  type CosmosRequest,\n  type EVMRequest,\n} from '../types'\nimport { createPublicClient, http } from 'viem';\n\nexport const EVMTransaction = async (\n  req: EVMRequest,\n  keyPair: KeyPair\n): Promise<Response> => {\n  try {\n    const account = await getNearAccount({\n      networkId: req.nearAuthentication.networkId,\n      accountId: req.nearAuthentication.accountId,\n      keypair: keyPair,\n    })\n\n    const contract = new ChainSignatureContract({\n      networkId: req.nearAuthentication.networkId,\n      contractId: req.chainConfig.contract,\n      accountId: account.accountId,\n      keypair: keyPair,\n    })\n\n    const evm = new chainAdapters.evm.EVM({\n      publicClient: createPublicClient({\n        transport: http(req.chainConfig.providerUrl),\n      }),\n      contract,\n    })\n\n    const { transaction, hashesToSign } =\n      await evm.prepareTransactionForSigning(req.transaction)\n\n    const signature = await contract.sign({\n      payload: hashesToSign[0],\n      path: req.derivationPath,\n      key_version: 0,\n    })\n\n    const txSerialized = evm.finalizeTransactionSigning({\n      transaction,\n      rsvSignatures: [signature],\n    })\n\n    const txHash = await evm.broadcastTx(txSerialized)\n\n    return {\n      transactionHash: txHash.hash,\n      success: true,\n    }\n  } catch (e: unknown) {\n    console.error(e)\n    return {\n      success: false,\n      errorMessage: e instanceof Error ? e.message : String(e),\n    }\n  }\n}\n\nexport const BTCTransaction = async (\n  req: BitcoinRequest,\n  keyPair: KeyPair\n): Promise<Response> => {\n  try {\n    const account = await getNearAccount({\n      networkId: req.nearAuthentication.networkId,\n      accountId: req.nearAuthentication.accountId,\n      keypair: keyPair,\n    })\n\n    const contract = new ChainSignatureContract({\n      networkId: req.nearAuthentication.networkId,\n      contractId: req.chainConfig.contract,\n      accountId: account.accountId,\n      keypair: keyPair,\n    })\n\n    const btc = new chainAdapters.btc.Bitcoin({\n      btcRpcAdapter: new BTCRpcAdapters.Mempool(req.chainConfig.providerUrl),\n      contract,\n      network: req.chainConfig.network,\n    })\n\n    const { transaction, hashesToSign } =\n      await btc.prepareTransactionForSigning(req.transaction)\n\n    const signatures = await Promise.all(\n      hashesToSign.map(\n        async (payload) =>\n          await contract.sign({\n            payload,\n            path: req.derivationPath,\n            key_version: 0,\n          })\n      )\n    )\n\n    const txSerialized = btc.finalizeTransactionSigning({\n      transaction,\n      rsvSignatures: signatures,\n    })\n\n    const txHash = await btc.broadcastTx(txSerialized)\n\n    return {\n      transactionHash: txHash.hash,\n      success: true,\n    }\n  } catch (e: unknown) {\n    return {\n      success: false,\n      errorMessage: e instanceof Error ? e.message : String(e),\n    }\n  }\n}\n\nexport const CosmosTransaction = async (\n  req: CosmosRequest,\n  keyPair: KeyPair\n): Promise<Response> => {\n  try {\n    const account = await getNearAccount({\n      networkId: req.nearAuthentication.networkId,\n      accountId: req.nearAuthentication.accountId,\n      keypair: keyPair,\n    })\n\n    const contract = new ChainSignatureContract({\n      networkId: req.nearAuthentication.networkId,\n      contractId: req.chainConfig.contract,\n      accountId: account.accountId,\n      keypair: keyPair,\n    })\n\n    const cosmos = new chainAdapters.cosmos.Cosmos({\n      contract,\n      chainId: req.chainConfig.chainId,\n    })\n\n    const { transaction, hashesToSign } =\n      await cosmos.prepareTransactionForSigning(req.transaction)\n\n    const signatures = await Promise.all(\n      hashesToSign.map(\n        async (payload) =>\n          await contract.sign({\n            payload,\n            path: req.derivationPath,\n            key_version: 0,\n          })\n      )\n    )\n\n    const txSerialized = cosmos.finalizeTransactionSigning({\n      transaction,\n      rsvSignatures: signatures,\n    })\n\n    const txHash = await cosmos.broadcastTx(txSerialized)\n\n    return {\n      transactionHash: txHash,\n      success: true,\n    }\n  } catch (e: unknown) {\n    console.error(e)\n    return {\n      success: false,\n      errorMessage: e instanceof Error ? e.message : String(e),\n    }\n  }\n}\n","import BN from 'bn.js'\n\nexport const NEAR_MAX_GAS = new BN('300000000000000')\nexport const DONT_CARE_ACCOUNT_ID = 'dontcare'\n","import { Account, Connection } from '@near-js/accounts'\nimport { KeyPair } from '@near-js/crypto'\nimport { InMemoryKeyStore } from '@near-js/keystores'\n\nimport { DONT_CARE_ACCOUNT_ID } from '@mpc-contract/constants'\n\ntype SetConnectionArgs =\n  | {\n      networkId: string\n      accountId: string\n      keypair: KeyPair\n    }\n  | {\n      networkId: string\n      accountId?: never\n      keypair?: never\n    }\n\nexport const getNearAccount = async ({\n  networkId,\n  accountId = DONT_CARE_ACCOUNT_ID,\n  keypair = KeyPair.fromRandom('ed25519'),\n}: SetConnectionArgs): Promise<Account> => {\n  const keyStore = new InMemoryKeyStore()\n  await keyStore.setKey(networkId, accountId, keypair)\n\n  const connection = Connection.fromConfig({\n    networkId,\n    provider: {\n      type: 'JsonRpcProvider',\n      args: {\n        url: {\n          testnet: 'https://rpc.testnet.near.org',\n          mainnet: 'https://rpc.mainnet.near.org',\n        }[networkId],\n      },\n    },\n    signer: { type: 'InMemorySigner', keyStore },\n  })\n\n  return new Account(connection, accountId)\n}\n","import { CONTRACT_ADDRESSES, ROOT_PUBLIC_KEYS } from '@constants'\nimport type { NajPublicKey } from '@types'\n\nexport const getRootPublicKey = (\n  contractAddress: string\n): NajPublicKey | undefined => {\n  const environment = Object.entries(CONTRACT_ADDRESSES).find(\n    ([_, address]) => address.toLowerCase() === contractAddress.toLowerCase()\n  )?.[0] as keyof typeof ROOT_PUBLIC_KEYS | undefined\n\n  if (environment) {\n    return ROOT_PUBLIC_KEYS[environment]\n  }\n\n  return undefined\n}\n","import { Contract } from '@near-js/accounts'\nimport { KeyPair } from '@near-js/crypto'\nimport { actionCreators } from '@near-js/transactions'\nimport { najToUncompressedPubKeySEC1 } from '@utils/cryptography'\nimport { getRootPublicKey } from '@utils/publicKey'\nimport BN from 'bn.js'\n\nimport { getNearAccount } from '@mpc-contract/account'\nimport { DONT_CARE_ACCOUNT_ID, NEAR_MAX_GAS } from '@mpc-contract/constants'\nimport { CONTRACT_ADDRESSES, ENVS } from '@constants'\nimport {\n  responseToMpcSignature,\n  type SendTransactionOptions,\n  sendTransactionUntil,\n} from '@mpc-contract/transaction'\nimport {\n  type NearNetworkId,\n  type ChainSignatureContractId,\n} from '@mpc-contract/types'\nimport type { RSVSignature, UncompressedPubKeySEC1, NajPublicKey } from '@types'\nimport { cryptography } from '@utils'\n\ntype MpcContract = Contract & {\n  public_key: () => Promise<NajPublicKey>\n  experimental_signature_deposit: () => Promise<number>\n  derived_public_key: (args: {\n    path: string\n    predecessor: string\n    domain_id?: number\n  }) => Promise<NajPublicKey | `Ed25519:${string}`>\n}\n\nexport interface SignArgs {\n  /** The payload to sign as an array of 32 bytes */\n  payload: number[]\n  /** The derivation path for key generation */\n  path: string\n  /** Version of the key to use */\n  key_version: number\n}\n\ninterface ChainSignatureContractArgs {\n  networkId: NearNetworkId\n  contractId?: ChainSignatureContractId\n  accountId?: string\n  keypair?: KeyPair\n  rootPublicKey?: NajPublicKey\n  sendTransactionOptions?: SendTransactionOptions\n}\n\n/**\n * Implementation of the ChainSignatureContract for NEAR chains.\n *\n * This class provides an interface to interact with the ChainSignatures contract\n * deployed on NEAR. It supports both view methods (which don't require authentication)\n * and change methods (which require a valid NEAR account and keypair).\n */\nexport class ChainSignatureContract {\n  private readonly networkId: NearNetworkId\n  private readonly contractId: ChainSignatureContractId\n  private readonly accountId: string\n  private readonly keypair: KeyPair\n  private readonly rootPublicKey?: NajPublicKey\n  private readonly sendTransactionOptions?: SendTransactionOptions\n\n  constructor({\n    networkId,\n    contractId,\n    accountId = DONT_CARE_ACCOUNT_ID,\n    keypair = KeyPair.fromRandom('ed25519'),\n    rootPublicKey,\n    sendTransactionOptions,\n  }: ChainSignatureContractArgs) {\n    if (networkId !== 'testnet' && networkId !== 'mainnet') {\n      throw new Error(`Invalid networkId: ${networkId}. Must be either 'testnet' or 'mainnet'`)\n    }\n\n    this.networkId = networkId\n    this.contractId = contractId || CONTRACT_ADDRESSES[networkId === 'testnet' ? ENVS.TESTNET : ENVS.MAINNET]\n    this.accountId = accountId\n    this.keypair = keypair\n    this.sendTransactionOptions = sendTransactionOptions\n    this.rootPublicKey =\n      rootPublicKey || getRootPublicKey(this.contractId)\n  }\n\n  private async getContract(): Promise<MpcContract> {\n    const account = await getNearAccount({\n      networkId: this.networkId,\n      accountId: this.accountId,\n      keypair: this.keypair,\n    })\n\n    return new Contract(account, this.contractId, {\n      viewMethods: [\n        'public_key',\n        'experimental_signature_deposit',\n        'derived_public_key',\n      ],\n      // Change methods use the sendTransactionUntil because the internal retry of the Contract class\n      // throws on NodeJs.\n      changeMethods: [],\n      useLocalViewExecution: false,\n    }) as unknown as MpcContract\n  }\n\n  async getCurrentSignatureDeposit(): Promise<BN> {\n    const contract = await this.getContract()\n    return new BN(\n      (await contract.experimental_signature_deposit()).toLocaleString(\n        'fullwide',\n        {\n          useGrouping: false,\n        }\n      )\n    )\n  }\n\n  async getDerivedPublicKey(args: {\n    path: string\n    predecessor: string\n    IsEd25519?: boolean\n    useRemoteDerivation?: boolean \n  }): Promise<UncompressedPubKeySEC1 | `Ed25519:${string}`> {\n    if (args.IsEd25519) {\n      const contract = await this.getContract()\n      return (await contract.derived_public_key({\n        path: args.path,\n        predecessor: args.predecessor,\n        domain_id: 1,\n      })) as `Ed25519:${string}`\n    }\n\n    // If useRemoteDerivation is true or we don't have a rootPublicKey,\n    // we need to call the contract to get the derived public key\n    if (args.useRemoteDerivation || !this.rootPublicKey) {\n      const contract = await this.getContract()\n      const najPubKey = await contract.derived_public_key(args)\n      return najToUncompressedPubKeySEC1(najPubKey as NajPublicKey)\n    }\n\n    // Otherwise, derive the child public key locally\n    const pubKey = cryptography.deriveChildPublicKey(\n      await this.getPublicKey(),\n      args.predecessor.toLowerCase(),\n      args.path,\n    )\n    return pubKey\n  }\n\n  async getPublicKey(): Promise<UncompressedPubKeySEC1> {\n    if (this.rootPublicKey) {\n      return najToUncompressedPubKeySEC1(this.rootPublicKey)\n    } else {\n      // Support for legacy contract\n      const contract = await this.getContract()\n      const najPubKey = await contract.public_key()\n      return najToUncompressedPubKeySEC1(najPubKey)\n    }\n  }\n\n  async sign(\n    args: SignArgs,\n    options?: {\n      nonce?: number\n    }\n  ): Promise<RSVSignature> {\n    this.requireAccount()\n\n    const deposit = await this.getCurrentSignatureDeposit()\n\n    const result = await sendTransactionUntil({\n      accountId: this.accountId,\n      keypair: this.keypair,\n      networkId: this.networkId,\n      receiverId: this.contractId,\n      actions: [\n        actionCreators.functionCall(\n          'sign',\n          { request: args },\n          BigInt(NEAR_MAX_GAS.toString()),\n          BigInt(deposit.toString())\n        ),\n      ],\n      nonce: options?.nonce,\n      options: this.sendTransactionOptions,\n    })\n\n    const signature = responseToMpcSignature({ response: result })\n\n    if (!signature) {\n      throw new Error('Transaction failed')\n    }\n\n    return signature\n  }\n\n  private requireAccount(): void {\n    if (this.accountId === DONT_CARE_ACCOUNT_ID) {\n      throw new Error(\n        'A valid account ID and keypair are required for change methods. Please instantiate a new contract with valid credentials.'\n      )\n    }\n  }\n}\n","import { InMemoryKeyStore } from '@near-js/keystores'\nimport type { Action as TransactionAction } from '@near-js/transactions'\nimport type { TxExecutionStatus } from '@near-js/types'\nimport type {\n  Action as WalletAction,\n  FinalExecutionOutcome,\n  NetworkId,\n} from '@near-wallet-selector/core'\nimport BN from 'bn.js'\nimport {\n  transactions,\n  utils as nearUtils,\n  connect,\n  type KeyPair,\n} from 'near-api-js'\nimport { getTransactionLastResult } from 'near-api-js/lib/providers'\nimport { withRetry } from 'viem'\n\nimport { ChainSignatureContract } from '@mpc-contract/ChainSignatureContract'\nimport { NEAR_MAX_GAS } from '@mpc-contract/constants'\nimport { type ChainSignatureContractId } from '@mpc-contract/types'\nimport {\n  type RSVSignature,\n  type KeyDerivationPath,\n  type MPCSignature,\n  type HashToSign,\n} from '@types'\nimport { cryptography } from '@utils'\n\nexport const mpcPayloadsToChainSigTransaction = async ({\n  networkId,\n  contractId,\n  hashesToSign,\n  path,\n}: {\n  networkId: NetworkId\n  contractId: ChainSignatureContractId\n  hashesToSign: HashToSign[]\n  path: KeyDerivationPath\n}): Promise<{\n  receiverId: string\n  actions: WalletAction[]\n}> => {\n  const contract = new ChainSignatureContract({\n    networkId,\n    contractId,\n  })\n\n  const currentContractFee = await contract.getCurrentSignatureDeposit()\n\n  return {\n    receiverId: contractId,\n    actions: hashesToSign.map((payload) => ({\n      type: 'FunctionCall',\n      params: {\n        methodName: 'sign',\n        args: {\n          request: {\n            payload: Array.from(payload),\n            path,\n            key_version: 0,\n          },\n        },\n        gas: NEAR_MAX_GAS.div(new BN(hashesToSign.length)).toString(),\n        deposit: currentContractFee?.toString() || '1',\n      },\n    })),\n  }\n}\n\nexport const responseToMpcSignature = ({\n  response,\n}: {\n  response: FinalExecutionOutcome\n}): RSVSignature | undefined => {\n  const signature = getTransactionLastResult(response) as MPCSignature\n\n  if (signature) {\n    return cryptography.toRSV(signature)\n  } else {\n    return undefined\n  }\n}\n\nexport interface SendTransactionOptions {\n  until: TxExecutionStatus\n  retryCount: number\n  delay: number\n  nodeUrl: string\n}\n\nexport const sendTransactionUntil = async ({\n  accountId,\n  keypair,\n  networkId,\n  receiverId,\n  actions,\n  nonce,\n  options = {\n    until: 'EXECUTED_OPTIMISTIC',\n    retryCount: 3,\n    delay: 5000, // Near RPC timeout\n    nodeUrl:\n      networkId === 'testnet'\n        ? 'https://test.rpc.fastnear.com'\n        : 'https://free.rpc.fastnear.com',\n  },\n}: {\n  accountId: string\n  keypair: KeyPair\n  networkId: NetworkId\n  receiverId: string\n  actions: TransactionAction[]\n  nonce?: number\n  options?: SendTransactionOptions\n}): Promise<FinalExecutionOutcome> => {\n  const keyStore = new InMemoryKeyStore()\n  await keyStore.setKey(networkId, accountId, keypair)\n\n  const near = await connect({\n    networkId,\n    keyStore,\n    nodeUrl: options.nodeUrl,\n  })\n\n  const { signer } = near.connection\n  const publicKey = await signer.getPublicKey(\n    accountId,\n    near.connection.networkId\n  )\n\n  const accessKey = (await near.connection.provider.query(\n    `access_key/${accountId}/${publicKey.toString()}`,\n    ''\n  )) as unknown as {\n    block_hash: string\n    block_height: number\n    nonce: number\n    permission: string\n  }\n\n  const recentBlockHash = nearUtils.serialize.base_decode(accessKey.block_hash)\n\n  const tx = transactions.createTransaction(\n    accountId,\n    publicKey,\n    receiverId,\n    nonce ?? ++accessKey.nonce,\n    actions,\n    recentBlockHash\n  )\n\n  const serializedTx = nearUtils.serialize.serialize(\n    transactions.SCHEMA.Transaction,\n    tx\n  )\n\n  const nearTransactionSignature = await signer.signMessage(\n    serializedTx,\n    accountId,\n    near.connection.networkId\n  )\n\n  const signedTransaction = new transactions.SignedTransaction({\n    transaction: tx,\n    signature: new transactions.Signature({\n      keyType: tx.publicKey.keyType,\n      data: nearTransactionSignature.signature,\n    }),\n  })\n\n  const { transaction } = await near.connection.provider.sendTransactionUntil(\n    signedTransaction,\n    'INCLUDED_FINAL'\n  )\n\n  const txHash = transaction.hash as string | undefined\n\n  if (!txHash) {\n    throw new Error('No transaction hash found')\n  }\n\n  return await withRetry(\n    async () => {\n      const txOutcome = await near.connection.provider.txStatus(\n        txHash,\n        accountId,\n        options.until\n      )\n\n      if (txOutcome) {\n        return txOutcome\n      }\n\n      throw new Error('Transaction not found')\n    },\n    {\n      retryCount: options.retryCount,\n      delay: options.delay,\n    }\n  )\n}\n"]}